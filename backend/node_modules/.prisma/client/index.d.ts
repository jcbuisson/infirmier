
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type user_actionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    user: userPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    time: Date
    user_id: number
    action: string
  }, ExtArgs["result"]["user_action"]>
  composites: {}
}

/**
 * Model user_action
 * 
 */
export type user_action = runtime.Types.DefaultSelection<user_actionPayload>
export type userPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    user_actions: user_actionPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    created_at: Date
    email: string | null
    password: string | null
    type: UserType
    accept_cgu: boolean | null
    admin: boolean
    google_id: string | null
    name: string | null
    picture: string | null
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model user
 * 
 */
export type user = runtime.Types.DefaultSelection<userPayload>
export type uePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    sub_ue_list: sub_uePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    created_at: Date
    name: string
    rank: number
  }, ExtArgs["result"]["ue"]>
  composites: {}
}

/**
 * Model ue
 * 
 */
export type ue = runtime.Types.DefaultSelection<uePayload>
export type sub_uePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    ue: uePayload<ExtArgs>
    topics: topicPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    created_at: Date
    name: string
    ue_id: number
    rank: number
  }, ExtArgs["result"]["sub_ue"]>
  composites: {}
}

/**
 * Model sub_ue
 * 
 */
export type sub_ue = runtime.Types.DefaultSelection<sub_uePayload>
export type topicPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    sub_ue: sub_uePayload<ExtArgs>
    cards: cardPayload<ExtArgs>[]
    case_studies: case_studyPayload<ExtArgs>[]
    quizes: quizPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    created_at: Date
    name: string
    sub_ue_id: number
    rank: number
    course_content: string
  }, ExtArgs["result"]["topic"]>
  composites: {}
}

/**
 * Model topic
 * 
 */
export type topic = runtime.Types.DefaultSelection<topicPayload>
export type cardPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    topic: topicPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    created_at: Date
    topic_id: number
    rank: number
    title: string
    content: string
  }, ExtArgs["result"]["card"]>
  composites: {}
}

/**
 * Model card
 * 
 */
export type card = runtime.Types.DefaultSelection<cardPayload>
export type case_studyPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    topic: topicPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    created_at: Date
    topic_id: number
    rank: number
    title: string
    content: string
  }, ExtArgs["result"]["case_study"]>
  composites: {}
}

/**
 * Model case_study
 * 
 */
export type case_study = runtime.Types.DefaultSelection<case_studyPayload>
export type quizPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    topic: topicPayload<ExtArgs>
    quiz_choices: quiz_choicePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    created_at: Date
    topic_id: number
    rank: number
    title: string
    question: string
  }, ExtArgs["result"]["quiz"]>
  composites: {}
}

/**
 * Model quiz
 * 
 */
export type quiz = runtime.Types.DefaultSelection<quizPayload>
export type quiz_choicePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    quiz: quizPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    created_at: Date
    quiz_id: number
    rank: number
    text: string
    answer: boolean
    comment: string
    positive_points: number
    negative_points: number
  }, ExtArgs["result"]["quiz_choice"]>
  composites: {}
}

/**
 * Model quiz_choice
 * 
 */
export type quiz_choice = runtime.Types.DefaultSelection<quiz_choicePayload>

/**
 * Enums
 */

export const UserType: {
  admin: 'admin',
  student: 'student'
};

export type UserType = (typeof UserType)[keyof typeof UserType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more User_actions
 * const user_actions = await prisma.user_action.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more User_actions
   * const user_actions = await prisma.user_action.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user_action`: Exposes CRUD operations for the **user_action** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_actions
    * const user_actions = await prisma.user_action.findMany()
    * ```
    */
  get user_action(): Prisma.user_actionDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.ue`: Exposes CRUD operations for the **ue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ues
    * const ues = await prisma.ue.findMany()
    * ```
    */
  get ue(): Prisma.ueDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.sub_ue`: Exposes CRUD operations for the **sub_ue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sub_ues
    * const sub_ues = await prisma.sub_ue.findMany()
    * ```
    */
  get sub_ue(): Prisma.sub_ueDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.topic`: Exposes CRUD operations for the **topic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Topics
    * const topics = await prisma.topic.findMany()
    * ```
    */
  get topic(): Prisma.topicDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.card`: Exposes CRUD operations for the **card** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cards
    * const cards = await prisma.card.findMany()
    * ```
    */
  get card(): Prisma.cardDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.case_study`: Exposes CRUD operations for the **case_study** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Case_studies
    * const case_studies = await prisma.case_study.findMany()
    * ```
    */
  get case_study(): Prisma.case_studyDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.quiz`: Exposes CRUD operations for the **quiz** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quizzes
    * const quizzes = await prisma.quiz.findMany()
    * ```
    */
  get quiz(): Prisma.quizDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.quiz_choice`: Exposes CRUD operations for the **quiz_choice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quiz_choices
    * const quiz_choices = await prisma.quiz_choice.findMany()
    * ```
    */
  get quiz_choice(): Prisma.quiz_choiceDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.1
   * Query Engine version: b20ead4d3ab9e78ac112966e242ded703f4a052c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user_action: 'user_action',
    user: 'user',
    ue: 'ue',
    sub_ue: 'sub_ue',
    topic: 'topic',
    card: 'card',
    case_study: 'case_study',
    quiz: 'quiz',
    quiz_choice: 'quiz_choice'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user_action' | 'user' | 'ue' | 'sub_ue' | 'topic' | 'card' | 'case_study' | 'quiz' | 'quiz_choice'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      user_action: {
        operations: {
          findUnique: {
            args: Prisma.user_actionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<user_actionPayload> | null
            payload: user_actionPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.user_actionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<user_actionPayload>
            payload: user_actionPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.user_actionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<user_actionPayload> | null
            payload: user_actionPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.user_actionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<user_actionPayload>
            payload: user_actionPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.user_actionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<user_actionPayload>[]
            payload: user_actionPayload<ExtArgs>
          }
          create: {
            args: Prisma.user_actionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<user_actionPayload>
            payload: user_actionPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.user_actionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: user_actionPayload<ExtArgs>
          }
          delete: {
            args: Prisma.user_actionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<user_actionPayload>
            payload: user_actionPayload<ExtArgs>
          }
          update: {
            args: Prisma.user_actionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<user_actionPayload>
            payload: user_actionPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.user_actionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: user_actionPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.user_actionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: user_actionPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.user_actionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<user_actionPayload>
            payload: user_actionPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.User_actionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser_action>
            payload: user_actionPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.User_actionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<User_actionGroupByOutputType>[]
            payload: user_actionPayload<ExtArgs>
          }
          count: {
            args: Prisma.user_actionCountArgs<ExtArgs>,
            result: $Utils.Optional<User_actionCountAggregateOutputType> | number
            payload: user_actionPayload<ExtArgs>
          }
        }
      }
      user: {
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload> | null
            payload: userPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
            payload: userPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload> | null
            payload: userPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
            payload: userPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>[]
            payload: userPayload<ExtArgs>
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
            payload: userPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: userPayload<ExtArgs>
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
            payload: userPayload<ExtArgs>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
            payload: userPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: userPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: userPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
            payload: userPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
            payload: userPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
            payload: userPayload<ExtArgs>
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
            payload: userPayload<ExtArgs>
          }
        }
      }
      ue: {
        operations: {
          findUnique: {
            args: Prisma.ueFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<uePayload> | null
            payload: uePayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.ueFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<uePayload>
            payload: uePayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.ueFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<uePayload> | null
            payload: uePayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.ueFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<uePayload>
            payload: uePayload<ExtArgs>
          }
          findMany: {
            args: Prisma.ueFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<uePayload>[]
            payload: uePayload<ExtArgs>
          }
          create: {
            args: Prisma.ueCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<uePayload>
            payload: uePayload<ExtArgs>
          }
          createMany: {
            args: Prisma.ueCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: uePayload<ExtArgs>
          }
          delete: {
            args: Prisma.ueDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<uePayload>
            payload: uePayload<ExtArgs>
          }
          update: {
            args: Prisma.ueUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<uePayload>
            payload: uePayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.ueDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: uePayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.ueUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: uePayload<ExtArgs>
          }
          upsert: {
            args: Prisma.ueUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<uePayload>
            payload: uePayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.UeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUe>
            payload: uePayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.UeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UeGroupByOutputType>[]
            payload: uePayload<ExtArgs>
          }
          count: {
            args: Prisma.ueCountArgs<ExtArgs>,
            result: $Utils.Optional<UeCountAggregateOutputType> | number
            payload: uePayload<ExtArgs>
          }
        }
      }
      sub_ue: {
        operations: {
          findUnique: {
            args: Prisma.sub_ueFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sub_uePayload> | null
            payload: sub_uePayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.sub_ueFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sub_uePayload>
            payload: sub_uePayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.sub_ueFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sub_uePayload> | null
            payload: sub_uePayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.sub_ueFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sub_uePayload>
            payload: sub_uePayload<ExtArgs>
          }
          findMany: {
            args: Prisma.sub_ueFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sub_uePayload>[]
            payload: sub_uePayload<ExtArgs>
          }
          create: {
            args: Prisma.sub_ueCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sub_uePayload>
            payload: sub_uePayload<ExtArgs>
          }
          createMany: {
            args: Prisma.sub_ueCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: sub_uePayload<ExtArgs>
          }
          delete: {
            args: Prisma.sub_ueDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sub_uePayload>
            payload: sub_uePayload<ExtArgs>
          }
          update: {
            args: Prisma.sub_ueUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sub_uePayload>
            payload: sub_uePayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.sub_ueDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: sub_uePayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.sub_ueUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: sub_uePayload<ExtArgs>
          }
          upsert: {
            args: Prisma.sub_ueUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<sub_uePayload>
            payload: sub_uePayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.Sub_ueAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSub_ue>
            payload: sub_uePayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.Sub_ueGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Sub_ueGroupByOutputType>[]
            payload: sub_uePayload<ExtArgs>
          }
          count: {
            args: Prisma.sub_ueCountArgs<ExtArgs>,
            result: $Utils.Optional<Sub_ueCountAggregateOutputType> | number
            payload: sub_uePayload<ExtArgs>
          }
        }
      }
      topic: {
        operations: {
          findUnique: {
            args: Prisma.topicFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<topicPayload> | null
            payload: topicPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.topicFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<topicPayload>
            payload: topicPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.topicFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<topicPayload> | null
            payload: topicPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.topicFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<topicPayload>
            payload: topicPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.topicFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<topicPayload>[]
            payload: topicPayload<ExtArgs>
          }
          create: {
            args: Prisma.topicCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<topicPayload>
            payload: topicPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.topicCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: topicPayload<ExtArgs>
          }
          delete: {
            args: Prisma.topicDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<topicPayload>
            payload: topicPayload<ExtArgs>
          }
          update: {
            args: Prisma.topicUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<topicPayload>
            payload: topicPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.topicDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: topicPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.topicUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: topicPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.topicUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<topicPayload>
            payload: topicPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.TopicAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTopic>
            payload: topicPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.TopicGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TopicGroupByOutputType>[]
            payload: topicPayload<ExtArgs>
          }
          count: {
            args: Prisma.topicCountArgs<ExtArgs>,
            result: $Utils.Optional<TopicCountAggregateOutputType> | number
            payload: topicPayload<ExtArgs>
          }
        }
      }
      card: {
        operations: {
          findUnique: {
            args: Prisma.cardFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cardPayload> | null
            payload: cardPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.cardFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cardPayload>
            payload: cardPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.cardFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cardPayload> | null
            payload: cardPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.cardFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cardPayload>
            payload: cardPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.cardFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cardPayload>[]
            payload: cardPayload<ExtArgs>
          }
          create: {
            args: Prisma.cardCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cardPayload>
            payload: cardPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.cardCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: cardPayload<ExtArgs>
          }
          delete: {
            args: Prisma.cardDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cardPayload>
            payload: cardPayload<ExtArgs>
          }
          update: {
            args: Prisma.cardUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cardPayload>
            payload: cardPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.cardDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: cardPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.cardUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: cardPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.cardUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cardPayload>
            payload: cardPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.CardAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCard>
            payload: cardPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.CardGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CardGroupByOutputType>[]
            payload: cardPayload<ExtArgs>
          }
          count: {
            args: Prisma.cardCountArgs<ExtArgs>,
            result: $Utils.Optional<CardCountAggregateOutputType> | number
            payload: cardPayload<ExtArgs>
          }
        }
      }
      case_study: {
        operations: {
          findUnique: {
            args: Prisma.case_studyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<case_studyPayload> | null
            payload: case_studyPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.case_studyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<case_studyPayload>
            payload: case_studyPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.case_studyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<case_studyPayload> | null
            payload: case_studyPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.case_studyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<case_studyPayload>
            payload: case_studyPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.case_studyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<case_studyPayload>[]
            payload: case_studyPayload<ExtArgs>
          }
          create: {
            args: Prisma.case_studyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<case_studyPayload>
            payload: case_studyPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.case_studyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: case_studyPayload<ExtArgs>
          }
          delete: {
            args: Prisma.case_studyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<case_studyPayload>
            payload: case_studyPayload<ExtArgs>
          }
          update: {
            args: Prisma.case_studyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<case_studyPayload>
            payload: case_studyPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.case_studyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: case_studyPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.case_studyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: case_studyPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.case_studyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<case_studyPayload>
            payload: case_studyPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.Case_studyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCase_study>
            payload: case_studyPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.Case_studyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Case_studyGroupByOutputType>[]
            payload: case_studyPayload<ExtArgs>
          }
          count: {
            args: Prisma.case_studyCountArgs<ExtArgs>,
            result: $Utils.Optional<Case_studyCountAggregateOutputType> | number
            payload: case_studyPayload<ExtArgs>
          }
        }
      }
      quiz: {
        operations: {
          findUnique: {
            args: Prisma.quizFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quizPayload> | null
            payload: quizPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.quizFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quizPayload>
            payload: quizPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.quizFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quizPayload> | null
            payload: quizPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.quizFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quizPayload>
            payload: quizPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.quizFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quizPayload>[]
            payload: quizPayload<ExtArgs>
          }
          create: {
            args: Prisma.quizCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quizPayload>
            payload: quizPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.quizCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: quizPayload<ExtArgs>
          }
          delete: {
            args: Prisma.quizDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quizPayload>
            payload: quizPayload<ExtArgs>
          }
          update: {
            args: Prisma.quizUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quizPayload>
            payload: quizPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.quizDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: quizPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.quizUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: quizPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.quizUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quizPayload>
            payload: quizPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.QuizAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuiz>
            payload: quizPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.QuizGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuizGroupByOutputType>[]
            payload: quizPayload<ExtArgs>
          }
          count: {
            args: Prisma.quizCountArgs<ExtArgs>,
            result: $Utils.Optional<QuizCountAggregateOutputType> | number
            payload: quizPayload<ExtArgs>
          }
        }
      }
      quiz_choice: {
        operations: {
          findUnique: {
            args: Prisma.quiz_choiceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quiz_choicePayload> | null
            payload: quiz_choicePayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.quiz_choiceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quiz_choicePayload>
            payload: quiz_choicePayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.quiz_choiceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quiz_choicePayload> | null
            payload: quiz_choicePayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.quiz_choiceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quiz_choicePayload>
            payload: quiz_choicePayload<ExtArgs>
          }
          findMany: {
            args: Prisma.quiz_choiceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quiz_choicePayload>[]
            payload: quiz_choicePayload<ExtArgs>
          }
          create: {
            args: Prisma.quiz_choiceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quiz_choicePayload>
            payload: quiz_choicePayload<ExtArgs>
          }
          createMany: {
            args: Prisma.quiz_choiceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: quiz_choicePayload<ExtArgs>
          }
          delete: {
            args: Prisma.quiz_choiceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quiz_choicePayload>
            payload: quiz_choicePayload<ExtArgs>
          }
          update: {
            args: Prisma.quiz_choiceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quiz_choicePayload>
            payload: quiz_choicePayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.quiz_choiceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: quiz_choicePayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.quiz_choiceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: quiz_choicePayload<ExtArgs>
          }
          upsert: {
            args: Prisma.quiz_choiceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<quiz_choicePayload>
            payload: quiz_choicePayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.Quiz_choiceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuiz_choice>
            payload: quiz_choicePayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.Quiz_choiceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Quiz_choiceGroupByOutputType>[]
            payload: quiz_choicePayload<ExtArgs>
          }
          count: {
            args: Prisma.quiz_choiceCountArgs<ExtArgs>,
            result: $Utils.Optional<Quiz_choiceCountAggregateOutputType> | number
            payload: quiz_choicePayload<ExtArgs>
          }
        }
      }
    }
  } & {
    other: {
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
          payload: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
          payload: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
          payload: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
          payload: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    user_actions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user_actions?: boolean | UserCountOutputTypeCountUser_actionsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUser_actionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: user_actionWhereInput
  }



  /**
   * Count Type UeCountOutputType
   */


  export type UeCountOutputType = {
    sub_ue_list: number
  }

  export type UeCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    sub_ue_list?: boolean | UeCountOutputTypeCountSub_ue_listArgs
  }

  // Custom InputTypes

  /**
   * UeCountOutputType without action
   */
  export type UeCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UeCountOutputType
     */
    select?: UeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UeCountOutputType without action
   */
  export type UeCountOutputTypeCountSub_ue_listArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: sub_ueWhereInput
  }



  /**
   * Count Type Sub_ueCountOutputType
   */


  export type Sub_ueCountOutputType = {
    topics: number
  }

  export type Sub_ueCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    topics?: boolean | Sub_ueCountOutputTypeCountTopicsArgs
  }

  // Custom InputTypes

  /**
   * Sub_ueCountOutputType without action
   */
  export type Sub_ueCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sub_ueCountOutputType
     */
    select?: Sub_ueCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * Sub_ueCountOutputType without action
   */
  export type Sub_ueCountOutputTypeCountTopicsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: topicWhereInput
  }



  /**
   * Count Type TopicCountOutputType
   */


  export type TopicCountOutputType = {
    cards: number
    case_studies: number
    quizes: number
  }

  export type TopicCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    cards?: boolean | TopicCountOutputTypeCountCardsArgs
    case_studies?: boolean | TopicCountOutputTypeCountCase_studiesArgs
    quizes?: boolean | TopicCountOutputTypeCountQuizesArgs
  }

  // Custom InputTypes

  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicCountOutputType
     */
    select?: TopicCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountCardsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: cardWhereInput
  }


  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountCase_studiesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: case_studyWhereInput
  }


  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountQuizesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: quizWhereInput
  }



  /**
   * Count Type QuizCountOutputType
   */


  export type QuizCountOutputType = {
    quiz_choices: number
  }

  export type QuizCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    quiz_choices?: boolean | QuizCountOutputTypeCountQuiz_choicesArgs
  }

  // Custom InputTypes

  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizCountOutputType
     */
    select?: QuizCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeCountQuiz_choicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: quiz_choiceWhereInput
  }



  /**
   * Models
   */

  /**
   * Model user_action
   */


  export type AggregateUser_action = {
    _count: User_actionCountAggregateOutputType | null
    _avg: User_actionAvgAggregateOutputType | null
    _sum: User_actionSumAggregateOutputType | null
    _min: User_actionMinAggregateOutputType | null
    _max: User_actionMaxAggregateOutputType | null
  }

  export type User_actionAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type User_actionSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type User_actionMinAggregateOutputType = {
    id: number | null
    time: Date | null
    user_id: number | null
    action: string | null
  }

  export type User_actionMaxAggregateOutputType = {
    id: number | null
    time: Date | null
    user_id: number | null
    action: string | null
  }

  export type User_actionCountAggregateOutputType = {
    id: number
    time: number
    user_id: number
    action: number
    _all: number
  }


  export type User_actionAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type User_actionSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type User_actionMinAggregateInputType = {
    id?: true
    time?: true
    user_id?: true
    action?: true
  }

  export type User_actionMaxAggregateInputType = {
    id?: true
    time?: true
    user_id?: true
    action?: true
  }

  export type User_actionCountAggregateInputType = {
    id?: true
    time?: true
    user_id?: true
    action?: true
    _all?: true
  }

  export type User_actionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_action to aggregate.
     */
    where?: user_actionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_actions to fetch.
     */
    orderBy?: Enumerable<user_actionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_actionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_actions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_actions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_actions
    **/
    _count?: true | User_actionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_actionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_actionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_actionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_actionMaxAggregateInputType
  }

  export type GetUser_actionAggregateType<T extends User_actionAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_action]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_action[P]>
      : GetScalarType<T[P], AggregateUser_action[P]>
  }




  export type User_actionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: user_actionWhereInput
    orderBy?: Enumerable<user_actionOrderByWithAggregationInput>
    by: User_actionScalarFieldEnum[]
    having?: user_actionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_actionCountAggregateInputType | true
    _avg?: User_actionAvgAggregateInputType
    _sum?: User_actionSumAggregateInputType
    _min?: User_actionMinAggregateInputType
    _max?: User_actionMaxAggregateInputType
  }


  export type User_actionGroupByOutputType = {
    id: number
    time: Date
    user_id: number
    action: string
    _count: User_actionCountAggregateOutputType | null
    _avg: User_actionAvgAggregateOutputType | null
    _sum: User_actionSumAggregateOutputType | null
    _min: User_actionMinAggregateOutputType | null
    _max: User_actionMaxAggregateOutputType | null
  }

  type GetUser_actionGroupByPayload<T extends User_actionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<User_actionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_actionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_actionGroupByOutputType[P]>
            : GetScalarType<T[P], User_actionGroupByOutputType[P]>
        }
      >
    >


  export type user_actionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    time?: boolean
    user_id?: boolean
    action?: boolean
    user?: boolean | userArgs<ExtArgs>
  }, ExtArgs["result"]["user_action"]>

  export type user_actionSelectScalar = {
    id?: boolean
    time?: boolean
    user_id?: boolean
    action?: boolean
  }

  export type user_actionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | userArgs<ExtArgs>
  }


  type user_actionGetPayload<S extends boolean | null | undefined | user_actionArgs> = $Types.GetResult<user_actionPayload, S>

  type user_actionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<user_actionFindManyArgs, 'select' | 'include'> & {
      select?: User_actionCountAggregateInputType | true
    }

  export interface user_actionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_action'], meta: { name: 'user_action' } }
    /**
     * Find zero or one User_action that matches the filter.
     * @param {user_actionFindUniqueArgs} args - Arguments to find a User_action
     * @example
     * // Get one User_action
     * const user_action = await prisma.user_action.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_actionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_actionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_action'> extends True ? Prisma__user_actionClient<$Types.GetResult<user_actionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__user_actionClient<$Types.GetResult<user_actionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User_action that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {user_actionFindUniqueOrThrowArgs} args - Arguments to find a User_action
     * @example
     * // Get one User_action
     * const user_action = await prisma.user_action.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_actionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_actionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__user_actionClient<$Types.GetResult<user_actionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User_action that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_actionFindFirstArgs} args - Arguments to find a User_action
     * @example
     * // Get one User_action
     * const user_action = await prisma.user_action.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_actionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_actionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_action'> extends True ? Prisma__user_actionClient<$Types.GetResult<user_actionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__user_actionClient<$Types.GetResult<user_actionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User_action that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_actionFindFirstOrThrowArgs} args - Arguments to find a User_action
     * @example
     * // Get one User_action
     * const user_action = await prisma.user_action.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_actionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_actionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__user_actionClient<$Types.GetResult<user_actionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more User_actions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_actionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_actions
     * const user_actions = await prisma.user_action.findMany()
     * 
     * // Get first 10 User_actions
     * const user_actions = await prisma.user_action.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_actionWithIdOnly = await prisma.user_action.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends user_actionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_actionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<user_actionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User_action.
     * @param {user_actionCreateArgs} args - Arguments to create a User_action.
     * @example
     * // Create one User_action
     * const User_action = await prisma.user_action.create({
     *   data: {
     *     // ... data to create a User_action
     *   }
     * })
     * 
    **/
    create<T extends user_actionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, user_actionCreateArgs<ExtArgs>>
    ): Prisma__user_actionClient<$Types.GetResult<user_actionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many User_actions.
     *     @param {user_actionCreateManyArgs} args - Arguments to create many User_actions.
     *     @example
     *     // Create many User_actions
     *     const user_action = await prisma.user_action.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_actionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_actionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User_action.
     * @param {user_actionDeleteArgs} args - Arguments to delete one User_action.
     * @example
     * // Delete one User_action
     * const User_action = await prisma.user_action.delete({
     *   where: {
     *     // ... filter to delete one User_action
     *   }
     * })
     * 
    **/
    delete<T extends user_actionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, user_actionDeleteArgs<ExtArgs>>
    ): Prisma__user_actionClient<$Types.GetResult<user_actionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User_action.
     * @param {user_actionUpdateArgs} args - Arguments to update one User_action.
     * @example
     * // Update one User_action
     * const user_action = await prisma.user_action.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_actionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, user_actionUpdateArgs<ExtArgs>>
    ): Prisma__user_actionClient<$Types.GetResult<user_actionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more User_actions.
     * @param {user_actionDeleteManyArgs} args - Arguments to filter User_actions to delete.
     * @example
     * // Delete a few User_actions
     * const { count } = await prisma.user_action.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_actionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_actionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_actions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_actionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_actions
     * const user_action = await prisma.user_action.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_actionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, user_actionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_action.
     * @param {user_actionUpsertArgs} args - Arguments to update or create a User_action.
     * @example
     * // Update or create a User_action
     * const user_action = await prisma.user_action.upsert({
     *   create: {
     *     // ... data to create a User_action
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_action we want to update
     *   }
     * })
    **/
    upsert<T extends user_actionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, user_actionUpsertArgs<ExtArgs>>
    ): Prisma__user_actionClient<$Types.GetResult<user_actionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of User_actions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_actionCountArgs} args - Arguments to filter User_actions to count.
     * @example
     * // Count the number of User_actions
     * const count = await prisma.user_action.count({
     *   where: {
     *     // ... the filter for the User_actions we want to count
     *   }
     * })
    **/
    count<T extends user_actionCountArgs>(
      args?: Subset<T, user_actionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_actionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_action.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_actionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_actionAggregateArgs>(args: Subset<T, User_actionAggregateArgs>): Prisma.PrismaPromise<GetUser_actionAggregateType<T>>

    /**
     * Group by User_action.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_actionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_actionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_actionGroupByArgs['orderBy'] }
        : { orderBy?: User_actionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_actionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_actionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user_action.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_actionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends userArgs<ExtArgs> = {}>(args?: Subset<T, userArgs<ExtArgs>>): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user_action base type for findUnique actions
   */
  export type user_actionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_action
     */
    select?: user_actionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_actionInclude<ExtArgs> | null
    /**
     * Filter, which user_action to fetch.
     */
    where: user_actionWhereUniqueInput
  }

  /**
   * user_action findUnique
   */
  export interface user_actionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends user_actionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_action findUniqueOrThrow
   */
  export type user_actionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_action
     */
    select?: user_actionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_actionInclude<ExtArgs> | null
    /**
     * Filter, which user_action to fetch.
     */
    where: user_actionWhereUniqueInput
  }


  /**
   * user_action base type for findFirst actions
   */
  export type user_actionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_action
     */
    select?: user_actionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_actionInclude<ExtArgs> | null
    /**
     * Filter, which user_action to fetch.
     */
    where?: user_actionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_actions to fetch.
     */
    orderBy?: Enumerable<user_actionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_actions.
     */
    cursor?: user_actionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_actions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_actions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_actions.
     */
    distinct?: Enumerable<User_actionScalarFieldEnum>
  }

  /**
   * user_action findFirst
   */
  export interface user_actionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends user_actionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_action findFirstOrThrow
   */
  export type user_actionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_action
     */
    select?: user_actionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_actionInclude<ExtArgs> | null
    /**
     * Filter, which user_action to fetch.
     */
    where?: user_actionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_actions to fetch.
     */
    orderBy?: Enumerable<user_actionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_actions.
     */
    cursor?: user_actionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_actions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_actions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_actions.
     */
    distinct?: Enumerable<User_actionScalarFieldEnum>
  }


  /**
   * user_action findMany
   */
  export type user_actionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_action
     */
    select?: user_actionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_actionInclude<ExtArgs> | null
    /**
     * Filter, which user_actions to fetch.
     */
    where?: user_actionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_actions to fetch.
     */
    orderBy?: Enumerable<user_actionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_actions.
     */
    cursor?: user_actionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_actions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_actions.
     */
    skip?: number
    distinct?: Enumerable<User_actionScalarFieldEnum>
  }


  /**
   * user_action create
   */
  export type user_actionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_action
     */
    select?: user_actionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_actionInclude<ExtArgs> | null
    /**
     * The data needed to create a user_action.
     */
    data: XOR<user_actionCreateInput, user_actionUncheckedCreateInput>
  }


  /**
   * user_action createMany
   */
  export type user_actionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_actions.
     */
    data: Enumerable<user_actionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user_action update
   */
  export type user_actionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_action
     */
    select?: user_actionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_actionInclude<ExtArgs> | null
    /**
     * The data needed to update a user_action.
     */
    data: XOR<user_actionUpdateInput, user_actionUncheckedUpdateInput>
    /**
     * Choose, which user_action to update.
     */
    where: user_actionWhereUniqueInput
  }


  /**
   * user_action updateMany
   */
  export type user_actionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_actions.
     */
    data: XOR<user_actionUpdateManyMutationInput, user_actionUncheckedUpdateManyInput>
    /**
     * Filter which user_actions to update
     */
    where?: user_actionWhereInput
  }


  /**
   * user_action upsert
   */
  export type user_actionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_action
     */
    select?: user_actionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_actionInclude<ExtArgs> | null
    /**
     * The filter to search for the user_action to update in case it exists.
     */
    where: user_actionWhereUniqueInput
    /**
     * In case the user_action found by the `where` argument doesn't exist, create a new user_action with this data.
     */
    create: XOR<user_actionCreateInput, user_actionUncheckedCreateInput>
    /**
     * In case the user_action was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_actionUpdateInput, user_actionUncheckedUpdateInput>
  }


  /**
   * user_action delete
   */
  export type user_actionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_action
     */
    select?: user_actionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_actionInclude<ExtArgs> | null
    /**
     * Filter which user_action to delete.
     */
    where: user_actionWhereUniqueInput
  }


  /**
   * user_action deleteMany
   */
  export type user_actionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_actions to delete
     */
    where?: user_actionWhereInput
  }


  /**
   * user_action without action
   */
  export type user_actionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_action
     */
    select?: user_actionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_actionInclude<ExtArgs> | null
  }



  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    email: string | null
    password: string | null
    type: UserType | null
    accept_cgu: boolean | null
    admin: boolean | null
    google_id: string | null
    name: string | null
    picture: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    email: string | null
    password: string | null
    type: UserType | null
    accept_cgu: boolean | null
    admin: boolean | null
    google_id: string | null
    name: string | null
    picture: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    created_at: number
    email: number
    password: number
    type: number
    accept_cgu: number
    admin: number
    google_id: number
    name: number
    picture: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    created_at?: true
    email?: true
    password?: true
    type?: true
    accept_cgu?: true
    admin?: true
    google_id?: true
    name?: true
    picture?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    created_at?: true
    email?: true
    password?: true
    type?: true
    accept_cgu?: true
    admin?: true
    google_id?: true
    name?: true
    picture?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    created_at?: true
    email?: true
    password?: true
    type?: true
    accept_cgu?: true
    admin?: true
    google_id?: true
    name?: true
    picture?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    created_at: Date
    email: string | null
    password: string | null
    type: UserType
    accept_cgu: boolean | null
    admin: boolean
    google_id: string | null
    name: string | null
    picture: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    email?: boolean
    password?: boolean
    type?: boolean
    accept_cgu?: boolean
    admin?: boolean
    google_id?: boolean
    name?: boolean
    picture?: boolean
    user_actions?: boolean | user$user_actionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    created_at?: boolean
    email?: boolean
    password?: boolean
    type?: boolean
    accept_cgu?: boolean
    admin?: boolean
    google_id?: boolean
    name?: boolean
    picture?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user_actions?: boolean | user$user_actionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type userGetPayload<S extends boolean | null | undefined | userArgs> = $Types.GetResult<userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<userPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userCreateArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userDeleteArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userUpsertArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user_actions<T extends user$user_actionsArgs<ExtArgs> = {}>(args?: Subset<T, user$user_actionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<user_actionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user base type for findUnique actions
   */
  export type userFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUnique
   */
  export interface userFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends userFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user base type for findFirst actions
   */
  export type userFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * user findFirst
   */
  export interface userFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends userFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data?: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }


  /**
   * user.user_actions
   */
  export type user$user_actionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_action
     */
    select?: user_actionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: user_actionInclude<ExtArgs> | null
    where?: user_actionWhereInput
    orderBy?: Enumerable<user_actionOrderByWithRelationInput>
    cursor?: user_actionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<User_actionScalarFieldEnum>
  }


  /**
   * user without action
   */
  export type userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
  }



  /**
   * Model ue
   */


  export type AggregateUe = {
    _count: UeCountAggregateOutputType | null
    _avg: UeAvgAggregateOutputType | null
    _sum: UeSumAggregateOutputType | null
    _min: UeMinAggregateOutputType | null
    _max: UeMaxAggregateOutputType | null
  }

  export type UeAvgAggregateOutputType = {
    id: number | null
    rank: number | null
  }

  export type UeSumAggregateOutputType = {
    id: number | null
    rank: number | null
  }

  export type UeMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    name: string | null
    rank: number | null
  }

  export type UeMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    name: string | null
    rank: number | null
  }

  export type UeCountAggregateOutputType = {
    id: number
    created_at: number
    name: number
    rank: number
    _all: number
  }


  export type UeAvgAggregateInputType = {
    id?: true
    rank?: true
  }

  export type UeSumAggregateInputType = {
    id?: true
    rank?: true
  }

  export type UeMinAggregateInputType = {
    id?: true
    created_at?: true
    name?: true
    rank?: true
  }

  export type UeMaxAggregateInputType = {
    id?: true
    created_at?: true
    name?: true
    rank?: true
  }

  export type UeCountAggregateInputType = {
    id?: true
    created_at?: true
    name?: true
    rank?: true
    _all?: true
  }

  export type UeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ue to aggregate.
     */
    where?: ueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ues to fetch.
     */
    orderBy?: Enumerable<ueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ues
    **/
    _count?: true | UeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UeMaxAggregateInputType
  }

  export type GetUeAggregateType<T extends UeAggregateArgs> = {
        [P in keyof T & keyof AggregateUe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUe[P]>
      : GetScalarType<T[P], AggregateUe[P]>
  }




  export type UeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ueWhereInput
    orderBy?: Enumerable<ueOrderByWithAggregationInput>
    by: UeScalarFieldEnum[]
    having?: ueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UeCountAggregateInputType | true
    _avg?: UeAvgAggregateInputType
    _sum?: UeSumAggregateInputType
    _min?: UeMinAggregateInputType
    _max?: UeMaxAggregateInputType
  }


  export type UeGroupByOutputType = {
    id: number
    created_at: Date
    name: string
    rank: number
    _count: UeCountAggregateOutputType | null
    _avg: UeAvgAggregateOutputType | null
    _sum: UeSumAggregateOutputType | null
    _min: UeMinAggregateOutputType | null
    _max: UeMaxAggregateOutputType | null
  }

  type GetUeGroupByPayload<T extends UeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UeGroupByOutputType[P]>
            : GetScalarType<T[P], UeGroupByOutputType[P]>
        }
      >
    >


  export type ueSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    name?: boolean
    rank?: boolean
    sub_ue_list?: boolean | ue$sub_ue_listArgs<ExtArgs>
    _count?: boolean | UeCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["ue"]>

  export type ueSelectScalar = {
    id?: boolean
    created_at?: boolean
    name?: boolean
    rank?: boolean
  }

  export type ueInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    sub_ue_list?: boolean | ue$sub_ue_listArgs<ExtArgs>
    _count?: boolean | UeCountOutputTypeArgs<ExtArgs>
  }


  type ueGetPayload<S extends boolean | null | undefined | ueArgs> = $Types.GetResult<uePayload, S>

  type ueCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ueFindManyArgs, 'select' | 'include'> & {
      select?: UeCountAggregateInputType | true
    }

  export interface ueDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ue'], meta: { name: 'ue' } }
    /**
     * Find zero or one Ue that matches the filter.
     * @param {ueFindUniqueArgs} args - Arguments to find a Ue
     * @example
     * // Get one Ue
     * const ue = await prisma.ue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ueFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ueFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ue'> extends True ? Prisma__ueClient<$Types.GetResult<uePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ueClient<$Types.GetResult<uePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Ue that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ueFindUniqueOrThrowArgs} args - Arguments to find a Ue
     * @example
     * // Get one Ue
     * const ue = await prisma.ue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ueFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ueFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ueClient<$Types.GetResult<uePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Ue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ueFindFirstArgs} args - Arguments to find a Ue
     * @example
     * // Get one Ue
     * const ue = await prisma.ue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ueFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ueFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ue'> extends True ? Prisma__ueClient<$Types.GetResult<uePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ueClient<$Types.GetResult<uePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Ue that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ueFindFirstOrThrowArgs} args - Arguments to find a Ue
     * @example
     * // Get one Ue
     * const ue = await prisma.ue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ueFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ueFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ueClient<$Types.GetResult<uePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Ues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ueFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ues
     * const ues = await prisma.ue.findMany()
     * 
     * // Get first 10 Ues
     * const ues = await prisma.ue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ueWithIdOnly = await prisma.ue.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ueFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ueFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<uePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Ue.
     * @param {ueCreateArgs} args - Arguments to create a Ue.
     * @example
     * // Create one Ue
     * const Ue = await prisma.ue.create({
     *   data: {
     *     // ... data to create a Ue
     *   }
     * })
     * 
    **/
    create<T extends ueCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ueCreateArgs<ExtArgs>>
    ): Prisma__ueClient<$Types.GetResult<uePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Ues.
     *     @param {ueCreateManyArgs} args - Arguments to create many Ues.
     *     @example
     *     // Create many Ues
     *     const ue = await prisma.ue.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ueCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ueCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ue.
     * @param {ueDeleteArgs} args - Arguments to delete one Ue.
     * @example
     * // Delete one Ue
     * const Ue = await prisma.ue.delete({
     *   where: {
     *     // ... filter to delete one Ue
     *   }
     * })
     * 
    **/
    delete<T extends ueDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ueDeleteArgs<ExtArgs>>
    ): Prisma__ueClient<$Types.GetResult<uePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Ue.
     * @param {ueUpdateArgs} args - Arguments to update one Ue.
     * @example
     * // Update one Ue
     * const ue = await prisma.ue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ueUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ueUpdateArgs<ExtArgs>>
    ): Prisma__ueClient<$Types.GetResult<uePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Ues.
     * @param {ueDeleteManyArgs} args - Arguments to filter Ues to delete.
     * @example
     * // Delete a few Ues
     * const { count } = await prisma.ue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ueDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ueDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ues
     * const ue = await prisma.ue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ueUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ueUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ue.
     * @param {ueUpsertArgs} args - Arguments to update or create a Ue.
     * @example
     * // Update or create a Ue
     * const ue = await prisma.ue.upsert({
     *   create: {
     *     // ... data to create a Ue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ue we want to update
     *   }
     * })
    **/
    upsert<T extends ueUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ueUpsertArgs<ExtArgs>>
    ): Prisma__ueClient<$Types.GetResult<uePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Ues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ueCountArgs} args - Arguments to filter Ues to count.
     * @example
     * // Count the number of Ues
     * const count = await prisma.ue.count({
     *   where: {
     *     // ... the filter for the Ues we want to count
     *   }
     * })
    **/
    count<T extends ueCountArgs>(
      args?: Subset<T, ueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UeAggregateArgs>(args: Subset<T, UeAggregateArgs>): Prisma.PrismaPromise<GetUeAggregateType<T>>

    /**
     * Group by Ue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UeGroupByArgs['orderBy'] }
        : { orderBy?: UeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ueClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sub_ue_list<T extends ue$sub_ue_listArgs<ExtArgs> = {}>(args?: Subset<T, ue$sub_ue_listArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<sub_uePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ue base type for findUnique actions
   */
  export type ueFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ue
     */
    select?: ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ueInclude<ExtArgs> | null
    /**
     * Filter, which ue to fetch.
     */
    where: ueWhereUniqueInput
  }

  /**
   * ue findUnique
   */
  export interface ueFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ueFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ue findUniqueOrThrow
   */
  export type ueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ue
     */
    select?: ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ueInclude<ExtArgs> | null
    /**
     * Filter, which ue to fetch.
     */
    where: ueWhereUniqueInput
  }


  /**
   * ue base type for findFirst actions
   */
  export type ueFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ue
     */
    select?: ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ueInclude<ExtArgs> | null
    /**
     * Filter, which ue to fetch.
     */
    where?: ueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ues to fetch.
     */
    orderBy?: Enumerable<ueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ues.
     */
    cursor?: ueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ues.
     */
    distinct?: Enumerable<UeScalarFieldEnum>
  }

  /**
   * ue findFirst
   */
  export interface ueFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ueFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ue findFirstOrThrow
   */
  export type ueFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ue
     */
    select?: ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ueInclude<ExtArgs> | null
    /**
     * Filter, which ue to fetch.
     */
    where?: ueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ues to fetch.
     */
    orderBy?: Enumerable<ueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ues.
     */
    cursor?: ueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ues.
     */
    distinct?: Enumerable<UeScalarFieldEnum>
  }


  /**
   * ue findMany
   */
  export type ueFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ue
     */
    select?: ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ueInclude<ExtArgs> | null
    /**
     * Filter, which ues to fetch.
     */
    where?: ueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ues to fetch.
     */
    orderBy?: Enumerable<ueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ues.
     */
    cursor?: ueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ues.
     */
    skip?: number
    distinct?: Enumerable<UeScalarFieldEnum>
  }


  /**
   * ue create
   */
  export type ueCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ue
     */
    select?: ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ueInclude<ExtArgs> | null
    /**
     * The data needed to create a ue.
     */
    data: XOR<ueCreateInput, ueUncheckedCreateInput>
  }


  /**
   * ue createMany
   */
  export type ueCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ues.
     */
    data: Enumerable<ueCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ue update
   */
  export type ueUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ue
     */
    select?: ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ueInclude<ExtArgs> | null
    /**
     * The data needed to update a ue.
     */
    data: XOR<ueUpdateInput, ueUncheckedUpdateInput>
    /**
     * Choose, which ue to update.
     */
    where: ueWhereUniqueInput
  }


  /**
   * ue updateMany
   */
  export type ueUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ues.
     */
    data: XOR<ueUpdateManyMutationInput, ueUncheckedUpdateManyInput>
    /**
     * Filter which ues to update
     */
    where?: ueWhereInput
  }


  /**
   * ue upsert
   */
  export type ueUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ue
     */
    select?: ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ueInclude<ExtArgs> | null
    /**
     * The filter to search for the ue to update in case it exists.
     */
    where: ueWhereUniqueInput
    /**
     * In case the ue found by the `where` argument doesn't exist, create a new ue with this data.
     */
    create: XOR<ueCreateInput, ueUncheckedCreateInput>
    /**
     * In case the ue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ueUpdateInput, ueUncheckedUpdateInput>
  }


  /**
   * ue delete
   */
  export type ueDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ue
     */
    select?: ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ueInclude<ExtArgs> | null
    /**
     * Filter which ue to delete.
     */
    where: ueWhereUniqueInput
  }


  /**
   * ue deleteMany
   */
  export type ueDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ues to delete
     */
    where?: ueWhereInput
  }


  /**
   * ue.sub_ue_list
   */
  export type ue$sub_ue_listArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_ue
     */
    select?: sub_ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_ueInclude<ExtArgs> | null
    where?: sub_ueWhereInput
    orderBy?: Enumerable<sub_ueOrderByWithRelationInput>
    cursor?: sub_ueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Sub_ueScalarFieldEnum>
  }


  /**
   * ue without action
   */
  export type ueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ue
     */
    select?: ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ueInclude<ExtArgs> | null
  }



  /**
   * Model sub_ue
   */


  export type AggregateSub_ue = {
    _count: Sub_ueCountAggregateOutputType | null
    _avg: Sub_ueAvgAggregateOutputType | null
    _sum: Sub_ueSumAggregateOutputType | null
    _min: Sub_ueMinAggregateOutputType | null
    _max: Sub_ueMaxAggregateOutputType | null
  }

  export type Sub_ueAvgAggregateOutputType = {
    id: number | null
    ue_id: number | null
    rank: number | null
  }

  export type Sub_ueSumAggregateOutputType = {
    id: number | null
    ue_id: number | null
    rank: number | null
  }

  export type Sub_ueMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    name: string | null
    ue_id: number | null
    rank: number | null
  }

  export type Sub_ueMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    name: string | null
    ue_id: number | null
    rank: number | null
  }

  export type Sub_ueCountAggregateOutputType = {
    id: number
    created_at: number
    name: number
    ue_id: number
    rank: number
    _all: number
  }


  export type Sub_ueAvgAggregateInputType = {
    id?: true
    ue_id?: true
    rank?: true
  }

  export type Sub_ueSumAggregateInputType = {
    id?: true
    ue_id?: true
    rank?: true
  }

  export type Sub_ueMinAggregateInputType = {
    id?: true
    created_at?: true
    name?: true
    ue_id?: true
    rank?: true
  }

  export type Sub_ueMaxAggregateInputType = {
    id?: true
    created_at?: true
    name?: true
    ue_id?: true
    rank?: true
  }

  export type Sub_ueCountAggregateInputType = {
    id?: true
    created_at?: true
    name?: true
    ue_id?: true
    rank?: true
    _all?: true
  }

  export type Sub_ueAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which sub_ue to aggregate.
     */
    where?: sub_ueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sub_ues to fetch.
     */
    orderBy?: Enumerable<sub_ueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sub_ueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sub_ues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sub_ues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sub_ues
    **/
    _count?: true | Sub_ueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Sub_ueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Sub_ueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Sub_ueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Sub_ueMaxAggregateInputType
  }

  export type GetSub_ueAggregateType<T extends Sub_ueAggregateArgs> = {
        [P in keyof T & keyof AggregateSub_ue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSub_ue[P]>
      : GetScalarType<T[P], AggregateSub_ue[P]>
  }




  export type Sub_ueGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: sub_ueWhereInput
    orderBy?: Enumerable<sub_ueOrderByWithAggregationInput>
    by: Sub_ueScalarFieldEnum[]
    having?: sub_ueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Sub_ueCountAggregateInputType | true
    _avg?: Sub_ueAvgAggregateInputType
    _sum?: Sub_ueSumAggregateInputType
    _min?: Sub_ueMinAggregateInputType
    _max?: Sub_ueMaxAggregateInputType
  }


  export type Sub_ueGroupByOutputType = {
    id: number
    created_at: Date
    name: string
    ue_id: number
    rank: number
    _count: Sub_ueCountAggregateOutputType | null
    _avg: Sub_ueAvgAggregateOutputType | null
    _sum: Sub_ueSumAggregateOutputType | null
    _min: Sub_ueMinAggregateOutputType | null
    _max: Sub_ueMaxAggregateOutputType | null
  }

  type GetSub_ueGroupByPayload<T extends Sub_ueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Sub_ueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Sub_ueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Sub_ueGroupByOutputType[P]>
            : GetScalarType<T[P], Sub_ueGroupByOutputType[P]>
        }
      >
    >


  export type sub_ueSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    name?: boolean
    ue_id?: boolean
    rank?: boolean
    ue?: boolean | ueArgs<ExtArgs>
    topics?: boolean | sub_ue$topicsArgs<ExtArgs>
    _count?: boolean | Sub_ueCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["sub_ue"]>

  export type sub_ueSelectScalar = {
    id?: boolean
    created_at?: boolean
    name?: boolean
    ue_id?: boolean
    rank?: boolean
  }

  export type sub_ueInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    ue?: boolean | ueArgs<ExtArgs>
    topics?: boolean | sub_ue$topicsArgs<ExtArgs>
    _count?: boolean | Sub_ueCountOutputTypeArgs<ExtArgs>
  }


  type sub_ueGetPayload<S extends boolean | null | undefined | sub_ueArgs> = $Types.GetResult<sub_uePayload, S>

  type sub_ueCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<sub_ueFindManyArgs, 'select' | 'include'> & {
      select?: Sub_ueCountAggregateInputType | true
    }

  export interface sub_ueDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sub_ue'], meta: { name: 'sub_ue' } }
    /**
     * Find zero or one Sub_ue that matches the filter.
     * @param {sub_ueFindUniqueArgs} args - Arguments to find a Sub_ue
     * @example
     * // Get one Sub_ue
     * const sub_ue = await prisma.sub_ue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sub_ueFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, sub_ueFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'sub_ue'> extends True ? Prisma__sub_ueClient<$Types.GetResult<sub_uePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__sub_ueClient<$Types.GetResult<sub_uePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Sub_ue that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {sub_ueFindUniqueOrThrowArgs} args - Arguments to find a Sub_ue
     * @example
     * // Get one Sub_ue
     * const sub_ue = await prisma.sub_ue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends sub_ueFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sub_ueFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__sub_ueClient<$Types.GetResult<sub_uePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Sub_ue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sub_ueFindFirstArgs} args - Arguments to find a Sub_ue
     * @example
     * // Get one Sub_ue
     * const sub_ue = await prisma.sub_ue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sub_ueFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, sub_ueFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'sub_ue'> extends True ? Prisma__sub_ueClient<$Types.GetResult<sub_uePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__sub_ueClient<$Types.GetResult<sub_uePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Sub_ue that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sub_ueFindFirstOrThrowArgs} args - Arguments to find a Sub_ue
     * @example
     * // Get one Sub_ue
     * const sub_ue = await prisma.sub_ue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends sub_ueFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sub_ueFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__sub_ueClient<$Types.GetResult<sub_uePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Sub_ues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sub_ueFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sub_ues
     * const sub_ues = await prisma.sub_ue.findMany()
     * 
     * // Get first 10 Sub_ues
     * const sub_ues = await prisma.sub_ue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sub_ueWithIdOnly = await prisma.sub_ue.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends sub_ueFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sub_ueFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<sub_uePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Sub_ue.
     * @param {sub_ueCreateArgs} args - Arguments to create a Sub_ue.
     * @example
     * // Create one Sub_ue
     * const Sub_ue = await prisma.sub_ue.create({
     *   data: {
     *     // ... data to create a Sub_ue
     *   }
     * })
     * 
    **/
    create<T extends sub_ueCreateArgs<ExtArgs>>(
      args: SelectSubset<T, sub_ueCreateArgs<ExtArgs>>
    ): Prisma__sub_ueClient<$Types.GetResult<sub_uePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Sub_ues.
     *     @param {sub_ueCreateManyArgs} args - Arguments to create many Sub_ues.
     *     @example
     *     // Create many Sub_ues
     *     const sub_ue = await prisma.sub_ue.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sub_ueCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sub_ueCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sub_ue.
     * @param {sub_ueDeleteArgs} args - Arguments to delete one Sub_ue.
     * @example
     * // Delete one Sub_ue
     * const Sub_ue = await prisma.sub_ue.delete({
     *   where: {
     *     // ... filter to delete one Sub_ue
     *   }
     * })
     * 
    **/
    delete<T extends sub_ueDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, sub_ueDeleteArgs<ExtArgs>>
    ): Prisma__sub_ueClient<$Types.GetResult<sub_uePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Sub_ue.
     * @param {sub_ueUpdateArgs} args - Arguments to update one Sub_ue.
     * @example
     * // Update one Sub_ue
     * const sub_ue = await prisma.sub_ue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sub_ueUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, sub_ueUpdateArgs<ExtArgs>>
    ): Prisma__sub_ueClient<$Types.GetResult<sub_uePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Sub_ues.
     * @param {sub_ueDeleteManyArgs} args - Arguments to filter Sub_ues to delete.
     * @example
     * // Delete a few Sub_ues
     * const { count } = await prisma.sub_ue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sub_ueDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sub_ueDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sub_ues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sub_ueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sub_ues
     * const sub_ue = await prisma.sub_ue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sub_ueUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, sub_ueUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sub_ue.
     * @param {sub_ueUpsertArgs} args - Arguments to update or create a Sub_ue.
     * @example
     * // Update or create a Sub_ue
     * const sub_ue = await prisma.sub_ue.upsert({
     *   create: {
     *     // ... data to create a Sub_ue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sub_ue we want to update
     *   }
     * })
    **/
    upsert<T extends sub_ueUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, sub_ueUpsertArgs<ExtArgs>>
    ): Prisma__sub_ueClient<$Types.GetResult<sub_uePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Sub_ues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sub_ueCountArgs} args - Arguments to filter Sub_ues to count.
     * @example
     * // Count the number of Sub_ues
     * const count = await prisma.sub_ue.count({
     *   where: {
     *     // ... the filter for the Sub_ues we want to count
     *   }
     * })
    **/
    count<T extends sub_ueCountArgs>(
      args?: Subset<T, sub_ueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Sub_ueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sub_ue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Sub_ueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Sub_ueAggregateArgs>(args: Subset<T, Sub_ueAggregateArgs>): Prisma.PrismaPromise<GetSub_ueAggregateType<T>>

    /**
     * Group by Sub_ue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Sub_ueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Sub_ueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Sub_ueGroupByArgs['orderBy'] }
        : { orderBy?: Sub_ueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Sub_ueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSub_ueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for sub_ue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sub_ueClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    ue<T extends ueArgs<ExtArgs> = {}>(args?: Subset<T, ueArgs<ExtArgs>>): Prisma__ueClient<$Types.GetResult<uePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    topics<T extends sub_ue$topicsArgs<ExtArgs> = {}>(args?: Subset<T, sub_ue$topicsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<topicPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * sub_ue base type for findUnique actions
   */
  export type sub_ueFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_ue
     */
    select?: sub_ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_ueInclude<ExtArgs> | null
    /**
     * Filter, which sub_ue to fetch.
     */
    where: sub_ueWhereUniqueInput
  }

  /**
   * sub_ue findUnique
   */
  export interface sub_ueFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends sub_ueFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * sub_ue findUniqueOrThrow
   */
  export type sub_ueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_ue
     */
    select?: sub_ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_ueInclude<ExtArgs> | null
    /**
     * Filter, which sub_ue to fetch.
     */
    where: sub_ueWhereUniqueInput
  }


  /**
   * sub_ue base type for findFirst actions
   */
  export type sub_ueFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_ue
     */
    select?: sub_ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_ueInclude<ExtArgs> | null
    /**
     * Filter, which sub_ue to fetch.
     */
    where?: sub_ueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sub_ues to fetch.
     */
    orderBy?: Enumerable<sub_ueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sub_ues.
     */
    cursor?: sub_ueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sub_ues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sub_ues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sub_ues.
     */
    distinct?: Enumerable<Sub_ueScalarFieldEnum>
  }

  /**
   * sub_ue findFirst
   */
  export interface sub_ueFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends sub_ueFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * sub_ue findFirstOrThrow
   */
  export type sub_ueFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_ue
     */
    select?: sub_ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_ueInclude<ExtArgs> | null
    /**
     * Filter, which sub_ue to fetch.
     */
    where?: sub_ueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sub_ues to fetch.
     */
    orderBy?: Enumerable<sub_ueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sub_ues.
     */
    cursor?: sub_ueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sub_ues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sub_ues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sub_ues.
     */
    distinct?: Enumerable<Sub_ueScalarFieldEnum>
  }


  /**
   * sub_ue findMany
   */
  export type sub_ueFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_ue
     */
    select?: sub_ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_ueInclude<ExtArgs> | null
    /**
     * Filter, which sub_ues to fetch.
     */
    where?: sub_ueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sub_ues to fetch.
     */
    orderBy?: Enumerable<sub_ueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sub_ues.
     */
    cursor?: sub_ueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sub_ues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sub_ues.
     */
    skip?: number
    distinct?: Enumerable<Sub_ueScalarFieldEnum>
  }


  /**
   * sub_ue create
   */
  export type sub_ueCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_ue
     */
    select?: sub_ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_ueInclude<ExtArgs> | null
    /**
     * The data needed to create a sub_ue.
     */
    data: XOR<sub_ueCreateInput, sub_ueUncheckedCreateInput>
  }


  /**
   * sub_ue createMany
   */
  export type sub_ueCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sub_ues.
     */
    data: Enumerable<sub_ueCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * sub_ue update
   */
  export type sub_ueUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_ue
     */
    select?: sub_ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_ueInclude<ExtArgs> | null
    /**
     * The data needed to update a sub_ue.
     */
    data: XOR<sub_ueUpdateInput, sub_ueUncheckedUpdateInput>
    /**
     * Choose, which sub_ue to update.
     */
    where: sub_ueWhereUniqueInput
  }


  /**
   * sub_ue updateMany
   */
  export type sub_ueUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sub_ues.
     */
    data: XOR<sub_ueUpdateManyMutationInput, sub_ueUncheckedUpdateManyInput>
    /**
     * Filter which sub_ues to update
     */
    where?: sub_ueWhereInput
  }


  /**
   * sub_ue upsert
   */
  export type sub_ueUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_ue
     */
    select?: sub_ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_ueInclude<ExtArgs> | null
    /**
     * The filter to search for the sub_ue to update in case it exists.
     */
    where: sub_ueWhereUniqueInput
    /**
     * In case the sub_ue found by the `where` argument doesn't exist, create a new sub_ue with this data.
     */
    create: XOR<sub_ueCreateInput, sub_ueUncheckedCreateInput>
    /**
     * In case the sub_ue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sub_ueUpdateInput, sub_ueUncheckedUpdateInput>
  }


  /**
   * sub_ue delete
   */
  export type sub_ueDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_ue
     */
    select?: sub_ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_ueInclude<ExtArgs> | null
    /**
     * Filter which sub_ue to delete.
     */
    where: sub_ueWhereUniqueInput
  }


  /**
   * sub_ue deleteMany
   */
  export type sub_ueDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which sub_ues to delete
     */
    where?: sub_ueWhereInput
  }


  /**
   * sub_ue.topics
   */
  export type sub_ue$topicsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: topicInclude<ExtArgs> | null
    where?: topicWhereInput
    orderBy?: Enumerable<topicOrderByWithRelationInput>
    cursor?: topicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TopicScalarFieldEnum>
  }


  /**
   * sub_ue without action
   */
  export type sub_ueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sub_ue
     */
    select?: sub_ueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sub_ueInclude<ExtArgs> | null
  }



  /**
   * Model topic
   */


  export type AggregateTopic = {
    _count: TopicCountAggregateOutputType | null
    _avg: TopicAvgAggregateOutputType | null
    _sum: TopicSumAggregateOutputType | null
    _min: TopicMinAggregateOutputType | null
    _max: TopicMaxAggregateOutputType | null
  }

  export type TopicAvgAggregateOutputType = {
    id: number | null
    sub_ue_id: number | null
    rank: number | null
  }

  export type TopicSumAggregateOutputType = {
    id: number | null
    sub_ue_id: number | null
    rank: number | null
  }

  export type TopicMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    name: string | null
    sub_ue_id: number | null
    rank: number | null
    course_content: string | null
  }

  export type TopicMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    name: string | null
    sub_ue_id: number | null
    rank: number | null
    course_content: string | null
  }

  export type TopicCountAggregateOutputType = {
    id: number
    created_at: number
    name: number
    sub_ue_id: number
    rank: number
    course_content: number
    _all: number
  }


  export type TopicAvgAggregateInputType = {
    id?: true
    sub_ue_id?: true
    rank?: true
  }

  export type TopicSumAggregateInputType = {
    id?: true
    sub_ue_id?: true
    rank?: true
  }

  export type TopicMinAggregateInputType = {
    id?: true
    created_at?: true
    name?: true
    sub_ue_id?: true
    rank?: true
    course_content?: true
  }

  export type TopicMaxAggregateInputType = {
    id?: true
    created_at?: true
    name?: true
    sub_ue_id?: true
    rank?: true
    course_content?: true
  }

  export type TopicCountAggregateInputType = {
    id?: true
    created_at?: true
    name?: true
    sub_ue_id?: true
    rank?: true
    course_content?: true
    _all?: true
  }

  export type TopicAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which topic to aggregate.
     */
    where?: topicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of topics to fetch.
     */
    orderBy?: Enumerable<topicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: topicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned topics
    **/
    _count?: true | TopicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TopicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TopicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TopicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TopicMaxAggregateInputType
  }

  export type GetTopicAggregateType<T extends TopicAggregateArgs> = {
        [P in keyof T & keyof AggregateTopic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTopic[P]>
      : GetScalarType<T[P], AggregateTopic[P]>
  }




  export type TopicGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: topicWhereInput
    orderBy?: Enumerable<topicOrderByWithAggregationInput>
    by: TopicScalarFieldEnum[]
    having?: topicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TopicCountAggregateInputType | true
    _avg?: TopicAvgAggregateInputType
    _sum?: TopicSumAggregateInputType
    _min?: TopicMinAggregateInputType
    _max?: TopicMaxAggregateInputType
  }


  export type TopicGroupByOutputType = {
    id: number
    created_at: Date
    name: string
    sub_ue_id: number
    rank: number
    course_content: string
    _count: TopicCountAggregateOutputType | null
    _avg: TopicAvgAggregateOutputType | null
    _sum: TopicSumAggregateOutputType | null
    _min: TopicMinAggregateOutputType | null
    _max: TopicMaxAggregateOutputType | null
  }

  type GetTopicGroupByPayload<T extends TopicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TopicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TopicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TopicGroupByOutputType[P]>
            : GetScalarType<T[P], TopicGroupByOutputType[P]>
        }
      >
    >


  export type topicSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    name?: boolean
    sub_ue_id?: boolean
    rank?: boolean
    course_content?: boolean
    sub_ue?: boolean | sub_ueArgs<ExtArgs>
    cards?: boolean | topic$cardsArgs<ExtArgs>
    case_studies?: boolean | topic$case_studiesArgs<ExtArgs>
    quizes?: boolean | topic$quizesArgs<ExtArgs>
    _count?: boolean | TopicCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["topic"]>

  export type topicSelectScalar = {
    id?: boolean
    created_at?: boolean
    name?: boolean
    sub_ue_id?: boolean
    rank?: boolean
    course_content?: boolean
  }

  export type topicInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    sub_ue?: boolean | sub_ueArgs<ExtArgs>
    cards?: boolean | topic$cardsArgs<ExtArgs>
    case_studies?: boolean | topic$case_studiesArgs<ExtArgs>
    quizes?: boolean | topic$quizesArgs<ExtArgs>
    _count?: boolean | TopicCountOutputTypeArgs<ExtArgs>
  }


  type topicGetPayload<S extends boolean | null | undefined | topicArgs> = $Types.GetResult<topicPayload, S>

  type topicCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<topicFindManyArgs, 'select' | 'include'> & {
      select?: TopicCountAggregateInputType | true
    }

  export interface topicDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['topic'], meta: { name: 'topic' } }
    /**
     * Find zero or one Topic that matches the filter.
     * @param {topicFindUniqueArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends topicFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, topicFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'topic'> extends True ? Prisma__topicClient<$Types.GetResult<topicPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__topicClient<$Types.GetResult<topicPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Topic that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {topicFindUniqueOrThrowArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends topicFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, topicFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__topicClient<$Types.GetResult<topicPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Topic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicFindFirstArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends topicFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, topicFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'topic'> extends True ? Prisma__topicClient<$Types.GetResult<topicPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__topicClient<$Types.GetResult<topicPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Topic that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicFindFirstOrThrowArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends topicFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, topicFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__topicClient<$Types.GetResult<topicPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Topics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Topics
     * const topics = await prisma.topic.findMany()
     * 
     * // Get first 10 Topics
     * const topics = await prisma.topic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const topicWithIdOnly = await prisma.topic.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends topicFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, topicFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<topicPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Topic.
     * @param {topicCreateArgs} args - Arguments to create a Topic.
     * @example
     * // Create one Topic
     * const Topic = await prisma.topic.create({
     *   data: {
     *     // ... data to create a Topic
     *   }
     * })
     * 
    **/
    create<T extends topicCreateArgs<ExtArgs>>(
      args: SelectSubset<T, topicCreateArgs<ExtArgs>>
    ): Prisma__topicClient<$Types.GetResult<topicPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Topics.
     *     @param {topicCreateManyArgs} args - Arguments to create many Topics.
     *     @example
     *     // Create many Topics
     *     const topic = await prisma.topic.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends topicCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, topicCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Topic.
     * @param {topicDeleteArgs} args - Arguments to delete one Topic.
     * @example
     * // Delete one Topic
     * const Topic = await prisma.topic.delete({
     *   where: {
     *     // ... filter to delete one Topic
     *   }
     * })
     * 
    **/
    delete<T extends topicDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, topicDeleteArgs<ExtArgs>>
    ): Prisma__topicClient<$Types.GetResult<topicPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Topic.
     * @param {topicUpdateArgs} args - Arguments to update one Topic.
     * @example
     * // Update one Topic
     * const topic = await prisma.topic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends topicUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, topicUpdateArgs<ExtArgs>>
    ): Prisma__topicClient<$Types.GetResult<topicPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Topics.
     * @param {topicDeleteManyArgs} args - Arguments to filter Topics to delete.
     * @example
     * // Delete a few Topics
     * const { count } = await prisma.topic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends topicDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, topicDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Topics
     * const topic = await prisma.topic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends topicUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, topicUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Topic.
     * @param {topicUpsertArgs} args - Arguments to update or create a Topic.
     * @example
     * // Update or create a Topic
     * const topic = await prisma.topic.upsert({
     *   create: {
     *     // ... data to create a Topic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Topic we want to update
     *   }
     * })
    **/
    upsert<T extends topicUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, topicUpsertArgs<ExtArgs>>
    ): Prisma__topicClient<$Types.GetResult<topicPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicCountArgs} args - Arguments to filter Topics to count.
     * @example
     * // Count the number of Topics
     * const count = await prisma.topic.count({
     *   where: {
     *     // ... the filter for the Topics we want to count
     *   }
     * })
    **/
    count<T extends topicCountArgs>(
      args?: Subset<T, topicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TopicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Topic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TopicAggregateArgs>(args: Subset<T, TopicAggregateArgs>): Prisma.PrismaPromise<GetTopicAggregateType<T>>

    /**
     * Group by Topic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TopicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TopicGroupByArgs['orderBy'] }
        : { orderBy?: TopicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TopicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for topic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__topicClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sub_ue<T extends sub_ueArgs<ExtArgs> = {}>(args?: Subset<T, sub_ueArgs<ExtArgs>>): Prisma__sub_ueClient<$Types.GetResult<sub_uePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    cards<T extends topic$cardsArgs<ExtArgs> = {}>(args?: Subset<T, topic$cardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<cardPayload<ExtArgs>, T, 'findMany', never>| Null>;

    case_studies<T extends topic$case_studiesArgs<ExtArgs> = {}>(args?: Subset<T, topic$case_studiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<case_studyPayload<ExtArgs>, T, 'findMany', never>| Null>;

    quizes<T extends topic$quizesArgs<ExtArgs> = {}>(args?: Subset<T, topic$quizesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<quizPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * topic base type for findUnique actions
   */
  export type topicFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * Filter, which topic to fetch.
     */
    where: topicWhereUniqueInput
  }

  /**
   * topic findUnique
   */
  export interface topicFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends topicFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * topic findUniqueOrThrow
   */
  export type topicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * Filter, which topic to fetch.
     */
    where: topicWhereUniqueInput
  }


  /**
   * topic base type for findFirst actions
   */
  export type topicFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * Filter, which topic to fetch.
     */
    where?: topicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of topics to fetch.
     */
    orderBy?: Enumerable<topicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for topics.
     */
    cursor?: topicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of topics.
     */
    distinct?: Enumerable<TopicScalarFieldEnum>
  }

  /**
   * topic findFirst
   */
  export interface topicFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends topicFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * topic findFirstOrThrow
   */
  export type topicFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * Filter, which topic to fetch.
     */
    where?: topicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of topics to fetch.
     */
    orderBy?: Enumerable<topicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for topics.
     */
    cursor?: topicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of topics.
     */
    distinct?: Enumerable<TopicScalarFieldEnum>
  }


  /**
   * topic findMany
   */
  export type topicFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * Filter, which topics to fetch.
     */
    where?: topicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of topics to fetch.
     */
    orderBy?: Enumerable<topicOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing topics.
     */
    cursor?: topicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` topics.
     */
    skip?: number
    distinct?: Enumerable<TopicScalarFieldEnum>
  }


  /**
   * topic create
   */
  export type topicCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * The data needed to create a topic.
     */
    data: XOR<topicCreateInput, topicUncheckedCreateInput>
  }


  /**
   * topic createMany
   */
  export type topicCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many topics.
     */
    data: Enumerable<topicCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * topic update
   */
  export type topicUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * The data needed to update a topic.
     */
    data: XOR<topicUpdateInput, topicUncheckedUpdateInput>
    /**
     * Choose, which topic to update.
     */
    where: topicWhereUniqueInput
  }


  /**
   * topic updateMany
   */
  export type topicUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update topics.
     */
    data: XOR<topicUpdateManyMutationInput, topicUncheckedUpdateManyInput>
    /**
     * Filter which topics to update
     */
    where?: topicWhereInput
  }


  /**
   * topic upsert
   */
  export type topicUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * The filter to search for the topic to update in case it exists.
     */
    where: topicWhereUniqueInput
    /**
     * In case the topic found by the `where` argument doesn't exist, create a new topic with this data.
     */
    create: XOR<topicCreateInput, topicUncheckedCreateInput>
    /**
     * In case the topic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<topicUpdateInput, topicUncheckedUpdateInput>
  }


  /**
   * topic delete
   */
  export type topicDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: topicInclude<ExtArgs> | null
    /**
     * Filter which topic to delete.
     */
    where: topicWhereUniqueInput
  }


  /**
   * topic deleteMany
   */
  export type topicDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which topics to delete
     */
    where?: topicWhereInput
  }


  /**
   * topic.cards
   */
  export type topic$cardsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the card
     */
    select?: cardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cardInclude<ExtArgs> | null
    where?: cardWhereInput
    orderBy?: Enumerable<cardOrderByWithRelationInput>
    cursor?: cardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CardScalarFieldEnum>
  }


  /**
   * topic.case_studies
   */
  export type topic$case_studiesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the case_study
     */
    select?: case_studySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: case_studyInclude<ExtArgs> | null
    where?: case_studyWhereInput
    orderBy?: Enumerable<case_studyOrderByWithRelationInput>
    cursor?: case_studyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Case_studyScalarFieldEnum>
  }


  /**
   * topic.quizes
   */
  export type topic$quizesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    where?: quizWhereInput
    orderBy?: Enumerable<quizOrderByWithRelationInput>
    cursor?: quizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<QuizScalarFieldEnum>
  }


  /**
   * topic without action
   */
  export type topicArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the topic
     */
    select?: topicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: topicInclude<ExtArgs> | null
  }



  /**
   * Model card
   */


  export type AggregateCard = {
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  export type CardAvgAggregateOutputType = {
    id: number | null
    topic_id: number | null
    rank: number | null
  }

  export type CardSumAggregateOutputType = {
    id: number | null
    topic_id: number | null
    rank: number | null
  }

  export type CardMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    topic_id: number | null
    rank: number | null
    title: string | null
    content: string | null
  }

  export type CardMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    topic_id: number | null
    rank: number | null
    title: string | null
    content: string | null
  }

  export type CardCountAggregateOutputType = {
    id: number
    created_at: number
    topic_id: number
    rank: number
    title: number
    content: number
    _all: number
  }


  export type CardAvgAggregateInputType = {
    id?: true
    topic_id?: true
    rank?: true
  }

  export type CardSumAggregateInputType = {
    id?: true
    topic_id?: true
    rank?: true
  }

  export type CardMinAggregateInputType = {
    id?: true
    created_at?: true
    topic_id?: true
    rank?: true
    title?: true
    content?: true
  }

  export type CardMaxAggregateInputType = {
    id?: true
    created_at?: true
    topic_id?: true
    rank?: true
    title?: true
    content?: true
  }

  export type CardCountAggregateInputType = {
    id?: true
    created_at?: true
    topic_id?: true
    rank?: true
    title?: true
    content?: true
    _all?: true
  }

  export type CardAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which card to aggregate.
     */
    where?: cardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cards to fetch.
     */
    orderBy?: Enumerable<cardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cards
    **/
    _count?: true | CardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardMaxAggregateInputType
  }

  export type GetCardAggregateType<T extends CardAggregateArgs> = {
        [P in keyof T & keyof AggregateCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCard[P]>
      : GetScalarType<T[P], AggregateCard[P]>
  }




  export type CardGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: cardWhereInput
    orderBy?: Enumerable<cardOrderByWithAggregationInput>
    by: CardScalarFieldEnum[]
    having?: cardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardCountAggregateInputType | true
    _avg?: CardAvgAggregateInputType
    _sum?: CardSumAggregateInputType
    _min?: CardMinAggregateInputType
    _max?: CardMaxAggregateInputType
  }


  export type CardGroupByOutputType = {
    id: number
    created_at: Date
    topic_id: number
    rank: number
    title: string
    content: string
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  type GetCardGroupByPayload<T extends CardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardGroupByOutputType[P]>
            : GetScalarType<T[P], CardGroupByOutputType[P]>
        }
      >
    >


  export type cardSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    topic_id?: boolean
    rank?: boolean
    title?: boolean
    content?: boolean
    topic?: boolean | topicArgs<ExtArgs>
  }, ExtArgs["result"]["card"]>

  export type cardSelectScalar = {
    id?: boolean
    created_at?: boolean
    topic_id?: boolean
    rank?: boolean
    title?: boolean
    content?: boolean
  }

  export type cardInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    topic?: boolean | topicArgs<ExtArgs>
  }


  type cardGetPayload<S extends boolean | null | undefined | cardArgs> = $Types.GetResult<cardPayload, S>

  type cardCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<cardFindManyArgs, 'select' | 'include'> & {
      select?: CardCountAggregateInputType | true
    }

  export interface cardDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['card'], meta: { name: 'card' } }
    /**
     * Find zero or one Card that matches the filter.
     * @param {cardFindUniqueArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cardFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, cardFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'card'> extends True ? Prisma__cardClient<$Types.GetResult<cardPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__cardClient<$Types.GetResult<cardPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Card that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {cardFindUniqueOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cardFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cardFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__cardClient<$Types.GetResult<cardPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Card that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardFindFirstArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cardFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, cardFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'card'> extends True ? Prisma__cardClient<$Types.GetResult<cardPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__cardClient<$Types.GetResult<cardPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Card that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardFindFirstOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cardFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cardFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__cardClient<$Types.GetResult<cardPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Cards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cards
     * const cards = await prisma.card.findMany()
     * 
     * // Get first 10 Cards
     * const cards = await prisma.card.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardWithIdOnly = await prisma.card.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends cardFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cardFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<cardPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Card.
     * @param {cardCreateArgs} args - Arguments to create a Card.
     * @example
     * // Create one Card
     * const Card = await prisma.card.create({
     *   data: {
     *     // ... data to create a Card
     *   }
     * })
     * 
    **/
    create<T extends cardCreateArgs<ExtArgs>>(
      args: SelectSubset<T, cardCreateArgs<ExtArgs>>
    ): Prisma__cardClient<$Types.GetResult<cardPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Cards.
     *     @param {cardCreateManyArgs} args - Arguments to create many Cards.
     *     @example
     *     // Create many Cards
     *     const card = await prisma.card.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cardCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cardCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Card.
     * @param {cardDeleteArgs} args - Arguments to delete one Card.
     * @example
     * // Delete one Card
     * const Card = await prisma.card.delete({
     *   where: {
     *     // ... filter to delete one Card
     *   }
     * })
     * 
    **/
    delete<T extends cardDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, cardDeleteArgs<ExtArgs>>
    ): Prisma__cardClient<$Types.GetResult<cardPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Card.
     * @param {cardUpdateArgs} args - Arguments to update one Card.
     * @example
     * // Update one Card
     * const card = await prisma.card.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cardUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, cardUpdateArgs<ExtArgs>>
    ): Prisma__cardClient<$Types.GetResult<cardPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Cards.
     * @param {cardDeleteManyArgs} args - Arguments to filter Cards to delete.
     * @example
     * // Delete a few Cards
     * const { count } = await prisma.card.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cardDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cardDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cards
     * const card = await prisma.card.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cardUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, cardUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Card.
     * @param {cardUpsertArgs} args - Arguments to update or create a Card.
     * @example
     * // Update or create a Card
     * const card = await prisma.card.upsert({
     *   create: {
     *     // ... data to create a Card
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Card we want to update
     *   }
     * })
    **/
    upsert<T extends cardUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, cardUpsertArgs<ExtArgs>>
    ): Prisma__cardClient<$Types.GetResult<cardPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cardCountArgs} args - Arguments to filter Cards to count.
     * @example
     * // Count the number of Cards
     * const count = await prisma.card.count({
     *   where: {
     *     // ... the filter for the Cards we want to count
     *   }
     * })
    **/
    count<T extends cardCountArgs>(
      args?: Subset<T, cardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardAggregateArgs>(args: Subset<T, CardAggregateArgs>): Prisma.PrismaPromise<GetCardAggregateType<T>>

    /**
     * Group by Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardGroupByArgs['orderBy'] }
        : { orderBy?: CardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for card.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__cardClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    topic<T extends topicArgs<ExtArgs> = {}>(args?: Subset<T, topicArgs<ExtArgs>>): Prisma__topicClient<$Types.GetResult<topicPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * card base type for findUnique actions
   */
  export type cardFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the card
     */
    select?: cardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cardInclude<ExtArgs> | null
    /**
     * Filter, which card to fetch.
     */
    where: cardWhereUniqueInput
  }

  /**
   * card findUnique
   */
  export interface cardFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends cardFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * card findUniqueOrThrow
   */
  export type cardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the card
     */
    select?: cardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cardInclude<ExtArgs> | null
    /**
     * Filter, which card to fetch.
     */
    where: cardWhereUniqueInput
  }


  /**
   * card base type for findFirst actions
   */
  export type cardFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the card
     */
    select?: cardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cardInclude<ExtArgs> | null
    /**
     * Filter, which card to fetch.
     */
    where?: cardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cards to fetch.
     */
    orderBy?: Enumerable<cardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cards.
     */
    cursor?: cardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cards.
     */
    distinct?: Enumerable<CardScalarFieldEnum>
  }

  /**
   * card findFirst
   */
  export interface cardFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends cardFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * card findFirstOrThrow
   */
  export type cardFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the card
     */
    select?: cardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cardInclude<ExtArgs> | null
    /**
     * Filter, which card to fetch.
     */
    where?: cardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cards to fetch.
     */
    orderBy?: Enumerable<cardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cards.
     */
    cursor?: cardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cards.
     */
    distinct?: Enumerable<CardScalarFieldEnum>
  }


  /**
   * card findMany
   */
  export type cardFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the card
     */
    select?: cardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cardInclude<ExtArgs> | null
    /**
     * Filter, which cards to fetch.
     */
    where?: cardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cards to fetch.
     */
    orderBy?: Enumerable<cardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cards.
     */
    cursor?: cardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cards.
     */
    skip?: number
    distinct?: Enumerable<CardScalarFieldEnum>
  }


  /**
   * card create
   */
  export type cardCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the card
     */
    select?: cardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cardInclude<ExtArgs> | null
    /**
     * The data needed to create a card.
     */
    data: XOR<cardCreateInput, cardUncheckedCreateInput>
  }


  /**
   * card createMany
   */
  export type cardCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cards.
     */
    data: Enumerable<cardCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * card update
   */
  export type cardUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the card
     */
    select?: cardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cardInclude<ExtArgs> | null
    /**
     * The data needed to update a card.
     */
    data: XOR<cardUpdateInput, cardUncheckedUpdateInput>
    /**
     * Choose, which card to update.
     */
    where: cardWhereUniqueInput
  }


  /**
   * card updateMany
   */
  export type cardUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cards.
     */
    data: XOR<cardUpdateManyMutationInput, cardUncheckedUpdateManyInput>
    /**
     * Filter which cards to update
     */
    where?: cardWhereInput
  }


  /**
   * card upsert
   */
  export type cardUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the card
     */
    select?: cardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cardInclude<ExtArgs> | null
    /**
     * The filter to search for the card to update in case it exists.
     */
    where: cardWhereUniqueInput
    /**
     * In case the card found by the `where` argument doesn't exist, create a new card with this data.
     */
    create: XOR<cardCreateInput, cardUncheckedCreateInput>
    /**
     * In case the card was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cardUpdateInput, cardUncheckedUpdateInput>
  }


  /**
   * card delete
   */
  export type cardDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the card
     */
    select?: cardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cardInclude<ExtArgs> | null
    /**
     * Filter which card to delete.
     */
    where: cardWhereUniqueInput
  }


  /**
   * card deleteMany
   */
  export type cardDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which cards to delete
     */
    where?: cardWhereInput
  }


  /**
   * card without action
   */
  export type cardArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the card
     */
    select?: cardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cardInclude<ExtArgs> | null
  }



  /**
   * Model case_study
   */


  export type AggregateCase_study = {
    _count: Case_studyCountAggregateOutputType | null
    _avg: Case_studyAvgAggregateOutputType | null
    _sum: Case_studySumAggregateOutputType | null
    _min: Case_studyMinAggregateOutputType | null
    _max: Case_studyMaxAggregateOutputType | null
  }

  export type Case_studyAvgAggregateOutputType = {
    id: number | null
    topic_id: number | null
    rank: number | null
  }

  export type Case_studySumAggregateOutputType = {
    id: number | null
    topic_id: number | null
    rank: number | null
  }

  export type Case_studyMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    topic_id: number | null
    rank: number | null
    title: string | null
    content: string | null
  }

  export type Case_studyMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    topic_id: number | null
    rank: number | null
    title: string | null
    content: string | null
  }

  export type Case_studyCountAggregateOutputType = {
    id: number
    created_at: number
    topic_id: number
    rank: number
    title: number
    content: number
    _all: number
  }


  export type Case_studyAvgAggregateInputType = {
    id?: true
    topic_id?: true
    rank?: true
  }

  export type Case_studySumAggregateInputType = {
    id?: true
    topic_id?: true
    rank?: true
  }

  export type Case_studyMinAggregateInputType = {
    id?: true
    created_at?: true
    topic_id?: true
    rank?: true
    title?: true
    content?: true
  }

  export type Case_studyMaxAggregateInputType = {
    id?: true
    created_at?: true
    topic_id?: true
    rank?: true
    title?: true
    content?: true
  }

  export type Case_studyCountAggregateInputType = {
    id?: true
    created_at?: true
    topic_id?: true
    rank?: true
    title?: true
    content?: true
    _all?: true
  }

  export type Case_studyAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which case_study to aggregate.
     */
    where?: case_studyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of case_studies to fetch.
     */
    orderBy?: Enumerable<case_studyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: case_studyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` case_studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` case_studies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned case_studies
    **/
    _count?: true | Case_studyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Case_studyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Case_studySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Case_studyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Case_studyMaxAggregateInputType
  }

  export type GetCase_studyAggregateType<T extends Case_studyAggregateArgs> = {
        [P in keyof T & keyof AggregateCase_study]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCase_study[P]>
      : GetScalarType<T[P], AggregateCase_study[P]>
  }




  export type Case_studyGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: case_studyWhereInput
    orderBy?: Enumerable<case_studyOrderByWithAggregationInput>
    by: Case_studyScalarFieldEnum[]
    having?: case_studyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Case_studyCountAggregateInputType | true
    _avg?: Case_studyAvgAggregateInputType
    _sum?: Case_studySumAggregateInputType
    _min?: Case_studyMinAggregateInputType
    _max?: Case_studyMaxAggregateInputType
  }


  export type Case_studyGroupByOutputType = {
    id: number
    created_at: Date
    topic_id: number
    rank: number
    title: string
    content: string
    _count: Case_studyCountAggregateOutputType | null
    _avg: Case_studyAvgAggregateOutputType | null
    _sum: Case_studySumAggregateOutputType | null
    _min: Case_studyMinAggregateOutputType | null
    _max: Case_studyMaxAggregateOutputType | null
  }

  type GetCase_studyGroupByPayload<T extends Case_studyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Case_studyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Case_studyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Case_studyGroupByOutputType[P]>
            : GetScalarType<T[P], Case_studyGroupByOutputType[P]>
        }
      >
    >


  export type case_studySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    topic_id?: boolean
    rank?: boolean
    title?: boolean
    content?: boolean
    topic?: boolean | topicArgs<ExtArgs>
  }, ExtArgs["result"]["case_study"]>

  export type case_studySelectScalar = {
    id?: boolean
    created_at?: boolean
    topic_id?: boolean
    rank?: boolean
    title?: boolean
    content?: boolean
  }

  export type case_studyInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    topic?: boolean | topicArgs<ExtArgs>
  }


  type case_studyGetPayload<S extends boolean | null | undefined | case_studyArgs> = $Types.GetResult<case_studyPayload, S>

  type case_studyCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<case_studyFindManyArgs, 'select' | 'include'> & {
      select?: Case_studyCountAggregateInputType | true
    }

  export interface case_studyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['case_study'], meta: { name: 'case_study' } }
    /**
     * Find zero or one Case_study that matches the filter.
     * @param {case_studyFindUniqueArgs} args - Arguments to find a Case_study
     * @example
     * // Get one Case_study
     * const case_study = await prisma.case_study.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends case_studyFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, case_studyFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'case_study'> extends True ? Prisma__case_studyClient<$Types.GetResult<case_studyPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__case_studyClient<$Types.GetResult<case_studyPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Case_study that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {case_studyFindUniqueOrThrowArgs} args - Arguments to find a Case_study
     * @example
     * // Get one Case_study
     * const case_study = await prisma.case_study.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends case_studyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, case_studyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__case_studyClient<$Types.GetResult<case_studyPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Case_study that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {case_studyFindFirstArgs} args - Arguments to find a Case_study
     * @example
     * // Get one Case_study
     * const case_study = await prisma.case_study.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends case_studyFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, case_studyFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'case_study'> extends True ? Prisma__case_studyClient<$Types.GetResult<case_studyPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__case_studyClient<$Types.GetResult<case_studyPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Case_study that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {case_studyFindFirstOrThrowArgs} args - Arguments to find a Case_study
     * @example
     * // Get one Case_study
     * const case_study = await prisma.case_study.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends case_studyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, case_studyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__case_studyClient<$Types.GetResult<case_studyPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Case_studies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {case_studyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Case_studies
     * const case_studies = await prisma.case_study.findMany()
     * 
     * // Get first 10 Case_studies
     * const case_studies = await prisma.case_study.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const case_studyWithIdOnly = await prisma.case_study.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends case_studyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, case_studyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<case_studyPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Case_study.
     * @param {case_studyCreateArgs} args - Arguments to create a Case_study.
     * @example
     * // Create one Case_study
     * const Case_study = await prisma.case_study.create({
     *   data: {
     *     // ... data to create a Case_study
     *   }
     * })
     * 
    **/
    create<T extends case_studyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, case_studyCreateArgs<ExtArgs>>
    ): Prisma__case_studyClient<$Types.GetResult<case_studyPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Case_studies.
     *     @param {case_studyCreateManyArgs} args - Arguments to create many Case_studies.
     *     @example
     *     // Create many Case_studies
     *     const case_study = await prisma.case_study.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends case_studyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, case_studyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Case_study.
     * @param {case_studyDeleteArgs} args - Arguments to delete one Case_study.
     * @example
     * // Delete one Case_study
     * const Case_study = await prisma.case_study.delete({
     *   where: {
     *     // ... filter to delete one Case_study
     *   }
     * })
     * 
    **/
    delete<T extends case_studyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, case_studyDeleteArgs<ExtArgs>>
    ): Prisma__case_studyClient<$Types.GetResult<case_studyPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Case_study.
     * @param {case_studyUpdateArgs} args - Arguments to update one Case_study.
     * @example
     * // Update one Case_study
     * const case_study = await prisma.case_study.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends case_studyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, case_studyUpdateArgs<ExtArgs>>
    ): Prisma__case_studyClient<$Types.GetResult<case_studyPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Case_studies.
     * @param {case_studyDeleteManyArgs} args - Arguments to filter Case_studies to delete.
     * @example
     * // Delete a few Case_studies
     * const { count } = await prisma.case_study.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends case_studyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, case_studyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Case_studies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {case_studyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Case_studies
     * const case_study = await prisma.case_study.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends case_studyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, case_studyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Case_study.
     * @param {case_studyUpsertArgs} args - Arguments to update or create a Case_study.
     * @example
     * // Update or create a Case_study
     * const case_study = await prisma.case_study.upsert({
     *   create: {
     *     // ... data to create a Case_study
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Case_study we want to update
     *   }
     * })
    **/
    upsert<T extends case_studyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, case_studyUpsertArgs<ExtArgs>>
    ): Prisma__case_studyClient<$Types.GetResult<case_studyPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Case_studies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {case_studyCountArgs} args - Arguments to filter Case_studies to count.
     * @example
     * // Count the number of Case_studies
     * const count = await prisma.case_study.count({
     *   where: {
     *     // ... the filter for the Case_studies we want to count
     *   }
     * })
    **/
    count<T extends case_studyCountArgs>(
      args?: Subset<T, case_studyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Case_studyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Case_study.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Case_studyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Case_studyAggregateArgs>(args: Subset<T, Case_studyAggregateArgs>): Prisma.PrismaPromise<GetCase_studyAggregateType<T>>

    /**
     * Group by Case_study.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Case_studyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Case_studyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Case_studyGroupByArgs['orderBy'] }
        : { orderBy?: Case_studyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Case_studyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCase_studyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for case_study.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__case_studyClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    topic<T extends topicArgs<ExtArgs> = {}>(args?: Subset<T, topicArgs<ExtArgs>>): Prisma__topicClient<$Types.GetResult<topicPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * case_study base type for findUnique actions
   */
  export type case_studyFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the case_study
     */
    select?: case_studySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: case_studyInclude<ExtArgs> | null
    /**
     * Filter, which case_study to fetch.
     */
    where: case_studyWhereUniqueInput
  }

  /**
   * case_study findUnique
   */
  export interface case_studyFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends case_studyFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * case_study findUniqueOrThrow
   */
  export type case_studyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the case_study
     */
    select?: case_studySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: case_studyInclude<ExtArgs> | null
    /**
     * Filter, which case_study to fetch.
     */
    where: case_studyWhereUniqueInput
  }


  /**
   * case_study base type for findFirst actions
   */
  export type case_studyFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the case_study
     */
    select?: case_studySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: case_studyInclude<ExtArgs> | null
    /**
     * Filter, which case_study to fetch.
     */
    where?: case_studyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of case_studies to fetch.
     */
    orderBy?: Enumerable<case_studyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for case_studies.
     */
    cursor?: case_studyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` case_studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` case_studies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of case_studies.
     */
    distinct?: Enumerable<Case_studyScalarFieldEnum>
  }

  /**
   * case_study findFirst
   */
  export interface case_studyFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends case_studyFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * case_study findFirstOrThrow
   */
  export type case_studyFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the case_study
     */
    select?: case_studySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: case_studyInclude<ExtArgs> | null
    /**
     * Filter, which case_study to fetch.
     */
    where?: case_studyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of case_studies to fetch.
     */
    orderBy?: Enumerable<case_studyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for case_studies.
     */
    cursor?: case_studyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` case_studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` case_studies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of case_studies.
     */
    distinct?: Enumerable<Case_studyScalarFieldEnum>
  }


  /**
   * case_study findMany
   */
  export type case_studyFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the case_study
     */
    select?: case_studySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: case_studyInclude<ExtArgs> | null
    /**
     * Filter, which case_studies to fetch.
     */
    where?: case_studyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of case_studies to fetch.
     */
    orderBy?: Enumerable<case_studyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing case_studies.
     */
    cursor?: case_studyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` case_studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` case_studies.
     */
    skip?: number
    distinct?: Enumerable<Case_studyScalarFieldEnum>
  }


  /**
   * case_study create
   */
  export type case_studyCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the case_study
     */
    select?: case_studySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: case_studyInclude<ExtArgs> | null
    /**
     * The data needed to create a case_study.
     */
    data: XOR<case_studyCreateInput, case_studyUncheckedCreateInput>
  }


  /**
   * case_study createMany
   */
  export type case_studyCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many case_studies.
     */
    data: Enumerable<case_studyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * case_study update
   */
  export type case_studyUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the case_study
     */
    select?: case_studySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: case_studyInclude<ExtArgs> | null
    /**
     * The data needed to update a case_study.
     */
    data: XOR<case_studyUpdateInput, case_studyUncheckedUpdateInput>
    /**
     * Choose, which case_study to update.
     */
    where: case_studyWhereUniqueInput
  }


  /**
   * case_study updateMany
   */
  export type case_studyUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update case_studies.
     */
    data: XOR<case_studyUpdateManyMutationInput, case_studyUncheckedUpdateManyInput>
    /**
     * Filter which case_studies to update
     */
    where?: case_studyWhereInput
  }


  /**
   * case_study upsert
   */
  export type case_studyUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the case_study
     */
    select?: case_studySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: case_studyInclude<ExtArgs> | null
    /**
     * The filter to search for the case_study to update in case it exists.
     */
    where: case_studyWhereUniqueInput
    /**
     * In case the case_study found by the `where` argument doesn't exist, create a new case_study with this data.
     */
    create: XOR<case_studyCreateInput, case_studyUncheckedCreateInput>
    /**
     * In case the case_study was found with the provided `where` argument, update it with this data.
     */
    update: XOR<case_studyUpdateInput, case_studyUncheckedUpdateInput>
  }


  /**
   * case_study delete
   */
  export type case_studyDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the case_study
     */
    select?: case_studySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: case_studyInclude<ExtArgs> | null
    /**
     * Filter which case_study to delete.
     */
    where: case_studyWhereUniqueInput
  }


  /**
   * case_study deleteMany
   */
  export type case_studyDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which case_studies to delete
     */
    where?: case_studyWhereInput
  }


  /**
   * case_study without action
   */
  export type case_studyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the case_study
     */
    select?: case_studySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: case_studyInclude<ExtArgs> | null
  }



  /**
   * Model quiz
   */


  export type AggregateQuiz = {
    _count: QuizCountAggregateOutputType | null
    _avg: QuizAvgAggregateOutputType | null
    _sum: QuizSumAggregateOutputType | null
    _min: QuizMinAggregateOutputType | null
    _max: QuizMaxAggregateOutputType | null
  }

  export type QuizAvgAggregateOutputType = {
    id: number | null
    topic_id: number | null
    rank: number | null
  }

  export type QuizSumAggregateOutputType = {
    id: number | null
    topic_id: number | null
    rank: number | null
  }

  export type QuizMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    topic_id: number | null
    rank: number | null
    title: string | null
    question: string | null
  }

  export type QuizMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    topic_id: number | null
    rank: number | null
    title: string | null
    question: string | null
  }

  export type QuizCountAggregateOutputType = {
    id: number
    created_at: number
    topic_id: number
    rank: number
    title: number
    question: number
    _all: number
  }


  export type QuizAvgAggregateInputType = {
    id?: true
    topic_id?: true
    rank?: true
  }

  export type QuizSumAggregateInputType = {
    id?: true
    topic_id?: true
    rank?: true
  }

  export type QuizMinAggregateInputType = {
    id?: true
    created_at?: true
    topic_id?: true
    rank?: true
    title?: true
    question?: true
  }

  export type QuizMaxAggregateInputType = {
    id?: true
    created_at?: true
    topic_id?: true
    rank?: true
    title?: true
    question?: true
  }

  export type QuizCountAggregateInputType = {
    id?: true
    created_at?: true
    topic_id?: true
    rank?: true
    title?: true
    question?: true
    _all?: true
  }

  export type QuizAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which quiz to aggregate.
     */
    where?: quizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: Enumerable<quizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: quizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned quizzes
    **/
    _count?: true | QuizCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuizAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuizSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizMaxAggregateInputType
  }

  export type GetQuizAggregateType<T extends QuizAggregateArgs> = {
        [P in keyof T & keyof AggregateQuiz]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuiz[P]>
      : GetScalarType<T[P], AggregateQuiz[P]>
  }




  export type QuizGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: quizWhereInput
    orderBy?: Enumerable<quizOrderByWithAggregationInput>
    by: QuizScalarFieldEnum[]
    having?: quizScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizCountAggregateInputType | true
    _avg?: QuizAvgAggregateInputType
    _sum?: QuizSumAggregateInputType
    _min?: QuizMinAggregateInputType
    _max?: QuizMaxAggregateInputType
  }


  export type QuizGroupByOutputType = {
    id: number
    created_at: Date
    topic_id: number
    rank: number
    title: string
    question: string
    _count: QuizCountAggregateOutputType | null
    _avg: QuizAvgAggregateOutputType | null
    _sum: QuizSumAggregateOutputType | null
    _min: QuizMinAggregateOutputType | null
    _max: QuizMaxAggregateOutputType | null
  }

  type GetQuizGroupByPayload<T extends QuizGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<QuizGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizGroupByOutputType[P]>
            : GetScalarType<T[P], QuizGroupByOutputType[P]>
        }
      >
    >


  export type quizSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    topic_id?: boolean
    rank?: boolean
    title?: boolean
    question?: boolean
    topic?: boolean | topicArgs<ExtArgs>
    quiz_choices?: boolean | quiz$quiz_choicesArgs<ExtArgs>
    _count?: boolean | QuizCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["quiz"]>

  export type quizSelectScalar = {
    id?: boolean
    created_at?: boolean
    topic_id?: boolean
    rank?: boolean
    title?: boolean
    question?: boolean
  }

  export type quizInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    topic?: boolean | topicArgs<ExtArgs>
    quiz_choices?: boolean | quiz$quiz_choicesArgs<ExtArgs>
    _count?: boolean | QuizCountOutputTypeArgs<ExtArgs>
  }


  type quizGetPayload<S extends boolean | null | undefined | quizArgs> = $Types.GetResult<quizPayload, S>

  type quizCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<quizFindManyArgs, 'select' | 'include'> & {
      select?: QuizCountAggregateInputType | true
    }

  export interface quizDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['quiz'], meta: { name: 'quiz' } }
    /**
     * Find zero or one Quiz that matches the filter.
     * @param {quizFindUniqueArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends quizFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, quizFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'quiz'> extends True ? Prisma__quizClient<$Types.GetResult<quizPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__quizClient<$Types.GetResult<quizPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Quiz that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {quizFindUniqueOrThrowArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends quizFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, quizFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__quizClient<$Types.GetResult<quizPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Quiz that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizFindFirstArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends quizFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, quizFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'quiz'> extends True ? Prisma__quizClient<$Types.GetResult<quizPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__quizClient<$Types.GetResult<quizPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Quiz that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizFindFirstOrThrowArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends quizFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, quizFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__quizClient<$Types.GetResult<quizPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quizzes
     * const quizzes = await prisma.quiz.findMany()
     * 
     * // Get first 10 Quizzes
     * const quizzes = await prisma.quiz.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quizWithIdOnly = await prisma.quiz.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends quizFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quizFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<quizPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Quiz.
     * @param {quizCreateArgs} args - Arguments to create a Quiz.
     * @example
     * // Create one Quiz
     * const Quiz = await prisma.quiz.create({
     *   data: {
     *     // ... data to create a Quiz
     *   }
     * })
     * 
    **/
    create<T extends quizCreateArgs<ExtArgs>>(
      args: SelectSubset<T, quizCreateArgs<ExtArgs>>
    ): Prisma__quizClient<$Types.GetResult<quizPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Quizzes.
     *     @param {quizCreateManyArgs} args - Arguments to create many Quizzes.
     *     @example
     *     // Create many Quizzes
     *     const quiz = await prisma.quiz.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends quizCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quizCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Quiz.
     * @param {quizDeleteArgs} args - Arguments to delete one Quiz.
     * @example
     * // Delete one Quiz
     * const Quiz = await prisma.quiz.delete({
     *   where: {
     *     // ... filter to delete one Quiz
     *   }
     * })
     * 
    **/
    delete<T extends quizDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, quizDeleteArgs<ExtArgs>>
    ): Prisma__quizClient<$Types.GetResult<quizPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Quiz.
     * @param {quizUpdateArgs} args - Arguments to update one Quiz.
     * @example
     * // Update one Quiz
     * const quiz = await prisma.quiz.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends quizUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, quizUpdateArgs<ExtArgs>>
    ): Prisma__quizClient<$Types.GetResult<quizPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Quizzes.
     * @param {quizDeleteManyArgs} args - Arguments to filter Quizzes to delete.
     * @example
     * // Delete a few Quizzes
     * const { count } = await prisma.quiz.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends quizDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quizDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quizzes
     * const quiz = await prisma.quiz.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends quizUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, quizUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Quiz.
     * @param {quizUpsertArgs} args - Arguments to update or create a Quiz.
     * @example
     * // Update or create a Quiz
     * const quiz = await prisma.quiz.upsert({
     *   create: {
     *     // ... data to create a Quiz
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quiz we want to update
     *   }
     * })
    **/
    upsert<T extends quizUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, quizUpsertArgs<ExtArgs>>
    ): Prisma__quizClient<$Types.GetResult<quizPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quizCountArgs} args - Arguments to filter Quizzes to count.
     * @example
     * // Count the number of Quizzes
     * const count = await prisma.quiz.count({
     *   where: {
     *     // ... the filter for the Quizzes we want to count
     *   }
     * })
    **/
    count<T extends quizCountArgs>(
      args?: Subset<T, quizCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizAggregateArgs>(args: Subset<T, QuizAggregateArgs>): Prisma.PrismaPromise<GetQuizAggregateType<T>>

    /**
     * Group by Quiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuizGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuizGroupByArgs['orderBy'] }
        : { orderBy?: QuizGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for quiz.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__quizClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    topic<T extends topicArgs<ExtArgs> = {}>(args?: Subset<T, topicArgs<ExtArgs>>): Prisma__topicClient<$Types.GetResult<topicPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    quiz_choices<T extends quiz$quiz_choicesArgs<ExtArgs> = {}>(args?: Subset<T, quiz$quiz_choicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<quiz_choicePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * quiz base type for findUnique actions
   */
  export type quizFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * Filter, which quiz to fetch.
     */
    where: quizWhereUniqueInput
  }

  /**
   * quiz findUnique
   */
  export interface quizFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends quizFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * quiz findUniqueOrThrow
   */
  export type quizFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * Filter, which quiz to fetch.
     */
    where: quizWhereUniqueInput
  }


  /**
   * quiz base type for findFirst actions
   */
  export type quizFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * Filter, which quiz to fetch.
     */
    where?: quizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: Enumerable<quizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quizzes.
     */
    cursor?: quizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quizzes.
     */
    distinct?: Enumerable<QuizScalarFieldEnum>
  }

  /**
   * quiz findFirst
   */
  export interface quizFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends quizFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * quiz findFirstOrThrow
   */
  export type quizFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * Filter, which quiz to fetch.
     */
    where?: quizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: Enumerable<quizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quizzes.
     */
    cursor?: quizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quizzes.
     */
    distinct?: Enumerable<QuizScalarFieldEnum>
  }


  /**
   * quiz findMany
   */
  export type quizFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * Filter, which quizzes to fetch.
     */
    where?: quizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quizzes to fetch.
     */
    orderBy?: Enumerable<quizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing quizzes.
     */
    cursor?: quizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quizzes.
     */
    skip?: number
    distinct?: Enumerable<QuizScalarFieldEnum>
  }


  /**
   * quiz create
   */
  export type quizCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * The data needed to create a quiz.
     */
    data: XOR<quizCreateInput, quizUncheckedCreateInput>
  }


  /**
   * quiz createMany
   */
  export type quizCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many quizzes.
     */
    data: Enumerable<quizCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * quiz update
   */
  export type quizUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * The data needed to update a quiz.
     */
    data: XOR<quizUpdateInput, quizUncheckedUpdateInput>
    /**
     * Choose, which quiz to update.
     */
    where: quizWhereUniqueInput
  }


  /**
   * quiz updateMany
   */
  export type quizUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update quizzes.
     */
    data: XOR<quizUpdateManyMutationInput, quizUncheckedUpdateManyInput>
    /**
     * Filter which quizzes to update
     */
    where?: quizWhereInput
  }


  /**
   * quiz upsert
   */
  export type quizUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * The filter to search for the quiz to update in case it exists.
     */
    where: quizWhereUniqueInput
    /**
     * In case the quiz found by the `where` argument doesn't exist, create a new quiz with this data.
     */
    create: XOR<quizCreateInput, quizUncheckedCreateInput>
    /**
     * In case the quiz was found with the provided `where` argument, update it with this data.
     */
    update: XOR<quizUpdateInput, quizUncheckedUpdateInput>
  }


  /**
   * quiz delete
   */
  export type quizDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
    /**
     * Filter which quiz to delete.
     */
    where: quizWhereUniqueInput
  }


  /**
   * quiz deleteMany
   */
  export type quizDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which quizzes to delete
     */
    where?: quizWhereInput
  }


  /**
   * quiz.quiz_choices
   */
  export type quiz$quiz_choicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_choice
     */
    select?: quiz_choiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quiz_choiceInclude<ExtArgs> | null
    where?: quiz_choiceWhereInput
    orderBy?: Enumerable<quiz_choiceOrderByWithRelationInput>
    cursor?: quiz_choiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Quiz_choiceScalarFieldEnum>
  }


  /**
   * quiz without action
   */
  export type quizArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz
     */
    select?: quizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quizInclude<ExtArgs> | null
  }



  /**
   * Model quiz_choice
   */


  export type AggregateQuiz_choice = {
    _count: Quiz_choiceCountAggregateOutputType | null
    _avg: Quiz_choiceAvgAggregateOutputType | null
    _sum: Quiz_choiceSumAggregateOutputType | null
    _min: Quiz_choiceMinAggregateOutputType | null
    _max: Quiz_choiceMaxAggregateOutputType | null
  }

  export type Quiz_choiceAvgAggregateOutputType = {
    id: number | null
    quiz_id: number | null
    rank: number | null
    positive_points: number | null
    negative_points: number | null
  }

  export type Quiz_choiceSumAggregateOutputType = {
    id: number | null
    quiz_id: number | null
    rank: number | null
    positive_points: number | null
    negative_points: number | null
  }

  export type Quiz_choiceMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    quiz_id: number | null
    rank: number | null
    text: string | null
    answer: boolean | null
    comment: string | null
    positive_points: number | null
    negative_points: number | null
  }

  export type Quiz_choiceMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    quiz_id: number | null
    rank: number | null
    text: string | null
    answer: boolean | null
    comment: string | null
    positive_points: number | null
    negative_points: number | null
  }

  export type Quiz_choiceCountAggregateOutputType = {
    id: number
    created_at: number
    quiz_id: number
    rank: number
    text: number
    answer: number
    comment: number
    positive_points: number
    negative_points: number
    _all: number
  }


  export type Quiz_choiceAvgAggregateInputType = {
    id?: true
    quiz_id?: true
    rank?: true
    positive_points?: true
    negative_points?: true
  }

  export type Quiz_choiceSumAggregateInputType = {
    id?: true
    quiz_id?: true
    rank?: true
    positive_points?: true
    negative_points?: true
  }

  export type Quiz_choiceMinAggregateInputType = {
    id?: true
    created_at?: true
    quiz_id?: true
    rank?: true
    text?: true
    answer?: true
    comment?: true
    positive_points?: true
    negative_points?: true
  }

  export type Quiz_choiceMaxAggregateInputType = {
    id?: true
    created_at?: true
    quiz_id?: true
    rank?: true
    text?: true
    answer?: true
    comment?: true
    positive_points?: true
    negative_points?: true
  }

  export type Quiz_choiceCountAggregateInputType = {
    id?: true
    created_at?: true
    quiz_id?: true
    rank?: true
    text?: true
    answer?: true
    comment?: true
    positive_points?: true
    negative_points?: true
    _all?: true
  }

  export type Quiz_choiceAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which quiz_choice to aggregate.
     */
    where?: quiz_choiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quiz_choices to fetch.
     */
    orderBy?: Enumerable<quiz_choiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: quiz_choiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quiz_choices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quiz_choices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned quiz_choices
    **/
    _count?: true | Quiz_choiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Quiz_choiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Quiz_choiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Quiz_choiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Quiz_choiceMaxAggregateInputType
  }

  export type GetQuiz_choiceAggregateType<T extends Quiz_choiceAggregateArgs> = {
        [P in keyof T & keyof AggregateQuiz_choice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuiz_choice[P]>
      : GetScalarType<T[P], AggregateQuiz_choice[P]>
  }




  export type Quiz_choiceGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: quiz_choiceWhereInput
    orderBy?: Enumerable<quiz_choiceOrderByWithAggregationInput>
    by: Quiz_choiceScalarFieldEnum[]
    having?: quiz_choiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Quiz_choiceCountAggregateInputType | true
    _avg?: Quiz_choiceAvgAggregateInputType
    _sum?: Quiz_choiceSumAggregateInputType
    _min?: Quiz_choiceMinAggregateInputType
    _max?: Quiz_choiceMaxAggregateInputType
  }


  export type Quiz_choiceGroupByOutputType = {
    id: number
    created_at: Date
    quiz_id: number
    rank: number
    text: string
    answer: boolean
    comment: string
    positive_points: number
    negative_points: number
    _count: Quiz_choiceCountAggregateOutputType | null
    _avg: Quiz_choiceAvgAggregateOutputType | null
    _sum: Quiz_choiceSumAggregateOutputType | null
    _min: Quiz_choiceMinAggregateOutputType | null
    _max: Quiz_choiceMaxAggregateOutputType | null
  }

  type GetQuiz_choiceGroupByPayload<T extends Quiz_choiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Quiz_choiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Quiz_choiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Quiz_choiceGroupByOutputType[P]>
            : GetScalarType<T[P], Quiz_choiceGroupByOutputType[P]>
        }
      >
    >


  export type quiz_choiceSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    quiz_id?: boolean
    rank?: boolean
    text?: boolean
    answer?: boolean
    comment?: boolean
    positive_points?: boolean
    negative_points?: boolean
    quiz?: boolean | quizArgs<ExtArgs>
  }, ExtArgs["result"]["quiz_choice"]>

  export type quiz_choiceSelectScalar = {
    id?: boolean
    created_at?: boolean
    quiz_id?: boolean
    rank?: boolean
    text?: boolean
    answer?: boolean
    comment?: boolean
    positive_points?: boolean
    negative_points?: boolean
  }

  export type quiz_choiceInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    quiz?: boolean | quizArgs<ExtArgs>
  }


  type quiz_choiceGetPayload<S extends boolean | null | undefined | quiz_choiceArgs> = $Types.GetResult<quiz_choicePayload, S>

  type quiz_choiceCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<quiz_choiceFindManyArgs, 'select' | 'include'> & {
      select?: Quiz_choiceCountAggregateInputType | true
    }

  export interface quiz_choiceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['quiz_choice'], meta: { name: 'quiz_choice' } }
    /**
     * Find zero or one Quiz_choice that matches the filter.
     * @param {quiz_choiceFindUniqueArgs} args - Arguments to find a Quiz_choice
     * @example
     * // Get one Quiz_choice
     * const quiz_choice = await prisma.quiz_choice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends quiz_choiceFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, quiz_choiceFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'quiz_choice'> extends True ? Prisma__quiz_choiceClient<$Types.GetResult<quiz_choicePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__quiz_choiceClient<$Types.GetResult<quiz_choicePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Quiz_choice that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {quiz_choiceFindUniqueOrThrowArgs} args - Arguments to find a Quiz_choice
     * @example
     * // Get one Quiz_choice
     * const quiz_choice = await prisma.quiz_choice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends quiz_choiceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, quiz_choiceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__quiz_choiceClient<$Types.GetResult<quiz_choicePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Quiz_choice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quiz_choiceFindFirstArgs} args - Arguments to find a Quiz_choice
     * @example
     * // Get one Quiz_choice
     * const quiz_choice = await prisma.quiz_choice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends quiz_choiceFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, quiz_choiceFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'quiz_choice'> extends True ? Prisma__quiz_choiceClient<$Types.GetResult<quiz_choicePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__quiz_choiceClient<$Types.GetResult<quiz_choicePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Quiz_choice that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quiz_choiceFindFirstOrThrowArgs} args - Arguments to find a Quiz_choice
     * @example
     * // Get one Quiz_choice
     * const quiz_choice = await prisma.quiz_choice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends quiz_choiceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, quiz_choiceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__quiz_choiceClient<$Types.GetResult<quiz_choicePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Quiz_choices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quiz_choiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quiz_choices
     * const quiz_choices = await prisma.quiz_choice.findMany()
     * 
     * // Get first 10 Quiz_choices
     * const quiz_choices = await prisma.quiz_choice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quiz_choiceWithIdOnly = await prisma.quiz_choice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends quiz_choiceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quiz_choiceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<quiz_choicePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Quiz_choice.
     * @param {quiz_choiceCreateArgs} args - Arguments to create a Quiz_choice.
     * @example
     * // Create one Quiz_choice
     * const Quiz_choice = await prisma.quiz_choice.create({
     *   data: {
     *     // ... data to create a Quiz_choice
     *   }
     * })
     * 
    **/
    create<T extends quiz_choiceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, quiz_choiceCreateArgs<ExtArgs>>
    ): Prisma__quiz_choiceClient<$Types.GetResult<quiz_choicePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Quiz_choices.
     *     @param {quiz_choiceCreateManyArgs} args - Arguments to create many Quiz_choices.
     *     @example
     *     // Create many Quiz_choices
     *     const quiz_choice = await prisma.quiz_choice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends quiz_choiceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quiz_choiceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Quiz_choice.
     * @param {quiz_choiceDeleteArgs} args - Arguments to delete one Quiz_choice.
     * @example
     * // Delete one Quiz_choice
     * const Quiz_choice = await prisma.quiz_choice.delete({
     *   where: {
     *     // ... filter to delete one Quiz_choice
     *   }
     * })
     * 
    **/
    delete<T extends quiz_choiceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, quiz_choiceDeleteArgs<ExtArgs>>
    ): Prisma__quiz_choiceClient<$Types.GetResult<quiz_choicePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Quiz_choice.
     * @param {quiz_choiceUpdateArgs} args - Arguments to update one Quiz_choice.
     * @example
     * // Update one Quiz_choice
     * const quiz_choice = await prisma.quiz_choice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends quiz_choiceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, quiz_choiceUpdateArgs<ExtArgs>>
    ): Prisma__quiz_choiceClient<$Types.GetResult<quiz_choicePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Quiz_choices.
     * @param {quiz_choiceDeleteManyArgs} args - Arguments to filter Quiz_choices to delete.
     * @example
     * // Delete a few Quiz_choices
     * const { count } = await prisma.quiz_choice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends quiz_choiceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, quiz_choiceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quiz_choices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quiz_choiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quiz_choices
     * const quiz_choice = await prisma.quiz_choice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends quiz_choiceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, quiz_choiceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Quiz_choice.
     * @param {quiz_choiceUpsertArgs} args - Arguments to update or create a Quiz_choice.
     * @example
     * // Update or create a Quiz_choice
     * const quiz_choice = await prisma.quiz_choice.upsert({
     *   create: {
     *     // ... data to create a Quiz_choice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quiz_choice we want to update
     *   }
     * })
    **/
    upsert<T extends quiz_choiceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, quiz_choiceUpsertArgs<ExtArgs>>
    ): Prisma__quiz_choiceClient<$Types.GetResult<quiz_choicePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Quiz_choices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quiz_choiceCountArgs} args - Arguments to filter Quiz_choices to count.
     * @example
     * // Count the number of Quiz_choices
     * const count = await prisma.quiz_choice.count({
     *   where: {
     *     // ... the filter for the Quiz_choices we want to count
     *   }
     * })
    **/
    count<T extends quiz_choiceCountArgs>(
      args?: Subset<T, quiz_choiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Quiz_choiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quiz_choice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Quiz_choiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Quiz_choiceAggregateArgs>(args: Subset<T, Quiz_choiceAggregateArgs>): Prisma.PrismaPromise<GetQuiz_choiceAggregateType<T>>

    /**
     * Group by Quiz_choice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Quiz_choiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Quiz_choiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Quiz_choiceGroupByArgs['orderBy'] }
        : { orderBy?: Quiz_choiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Quiz_choiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuiz_choiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for quiz_choice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__quiz_choiceClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    quiz<T extends quizArgs<ExtArgs> = {}>(args?: Subset<T, quizArgs<ExtArgs>>): Prisma__quizClient<$Types.GetResult<quizPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * quiz_choice base type for findUnique actions
   */
  export type quiz_choiceFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_choice
     */
    select?: quiz_choiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quiz_choiceInclude<ExtArgs> | null
    /**
     * Filter, which quiz_choice to fetch.
     */
    where: quiz_choiceWhereUniqueInput
  }

  /**
   * quiz_choice findUnique
   */
  export interface quiz_choiceFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends quiz_choiceFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * quiz_choice findUniqueOrThrow
   */
  export type quiz_choiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_choice
     */
    select?: quiz_choiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quiz_choiceInclude<ExtArgs> | null
    /**
     * Filter, which quiz_choice to fetch.
     */
    where: quiz_choiceWhereUniqueInput
  }


  /**
   * quiz_choice base type for findFirst actions
   */
  export type quiz_choiceFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_choice
     */
    select?: quiz_choiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quiz_choiceInclude<ExtArgs> | null
    /**
     * Filter, which quiz_choice to fetch.
     */
    where?: quiz_choiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quiz_choices to fetch.
     */
    orderBy?: Enumerable<quiz_choiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quiz_choices.
     */
    cursor?: quiz_choiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quiz_choices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quiz_choices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quiz_choices.
     */
    distinct?: Enumerable<Quiz_choiceScalarFieldEnum>
  }

  /**
   * quiz_choice findFirst
   */
  export interface quiz_choiceFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends quiz_choiceFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * quiz_choice findFirstOrThrow
   */
  export type quiz_choiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_choice
     */
    select?: quiz_choiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quiz_choiceInclude<ExtArgs> | null
    /**
     * Filter, which quiz_choice to fetch.
     */
    where?: quiz_choiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quiz_choices to fetch.
     */
    orderBy?: Enumerable<quiz_choiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quiz_choices.
     */
    cursor?: quiz_choiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quiz_choices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quiz_choices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quiz_choices.
     */
    distinct?: Enumerable<Quiz_choiceScalarFieldEnum>
  }


  /**
   * quiz_choice findMany
   */
  export type quiz_choiceFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_choice
     */
    select?: quiz_choiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quiz_choiceInclude<ExtArgs> | null
    /**
     * Filter, which quiz_choices to fetch.
     */
    where?: quiz_choiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quiz_choices to fetch.
     */
    orderBy?: Enumerable<quiz_choiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing quiz_choices.
     */
    cursor?: quiz_choiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quiz_choices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quiz_choices.
     */
    skip?: number
    distinct?: Enumerable<Quiz_choiceScalarFieldEnum>
  }


  /**
   * quiz_choice create
   */
  export type quiz_choiceCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_choice
     */
    select?: quiz_choiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quiz_choiceInclude<ExtArgs> | null
    /**
     * The data needed to create a quiz_choice.
     */
    data: XOR<quiz_choiceCreateInput, quiz_choiceUncheckedCreateInput>
  }


  /**
   * quiz_choice createMany
   */
  export type quiz_choiceCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many quiz_choices.
     */
    data: Enumerable<quiz_choiceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * quiz_choice update
   */
  export type quiz_choiceUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_choice
     */
    select?: quiz_choiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quiz_choiceInclude<ExtArgs> | null
    /**
     * The data needed to update a quiz_choice.
     */
    data: XOR<quiz_choiceUpdateInput, quiz_choiceUncheckedUpdateInput>
    /**
     * Choose, which quiz_choice to update.
     */
    where: quiz_choiceWhereUniqueInput
  }


  /**
   * quiz_choice updateMany
   */
  export type quiz_choiceUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update quiz_choices.
     */
    data: XOR<quiz_choiceUpdateManyMutationInput, quiz_choiceUncheckedUpdateManyInput>
    /**
     * Filter which quiz_choices to update
     */
    where?: quiz_choiceWhereInput
  }


  /**
   * quiz_choice upsert
   */
  export type quiz_choiceUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_choice
     */
    select?: quiz_choiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quiz_choiceInclude<ExtArgs> | null
    /**
     * The filter to search for the quiz_choice to update in case it exists.
     */
    where: quiz_choiceWhereUniqueInput
    /**
     * In case the quiz_choice found by the `where` argument doesn't exist, create a new quiz_choice with this data.
     */
    create: XOR<quiz_choiceCreateInput, quiz_choiceUncheckedCreateInput>
    /**
     * In case the quiz_choice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<quiz_choiceUpdateInput, quiz_choiceUncheckedUpdateInput>
  }


  /**
   * quiz_choice delete
   */
  export type quiz_choiceDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_choice
     */
    select?: quiz_choiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quiz_choiceInclude<ExtArgs> | null
    /**
     * Filter which quiz_choice to delete.
     */
    where: quiz_choiceWhereUniqueInput
  }


  /**
   * quiz_choice deleteMany
   */
  export type quiz_choiceDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which quiz_choices to delete
     */
    where?: quiz_choiceWhereInput
  }


  /**
   * quiz_choice without action
   */
  export type quiz_choiceArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the quiz_choice
     */
    select?: quiz_choiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: quiz_choiceInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const User_actionScalarFieldEnum: {
    id: 'id',
    time: 'time',
    user_id: 'user_id',
    action: 'action'
  };

  export type User_actionScalarFieldEnum = (typeof User_actionScalarFieldEnum)[keyof typeof User_actionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    email: 'email',
    password: 'password',
    type: 'type',
    accept_cgu: 'accept_cgu',
    admin: 'admin',
    google_id: 'google_id',
    name: 'name',
    picture: 'picture'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UeScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    name: 'name',
    rank: 'rank'
  };

  export type UeScalarFieldEnum = (typeof UeScalarFieldEnum)[keyof typeof UeScalarFieldEnum]


  export const Sub_ueScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    name: 'name',
    ue_id: 'ue_id',
    rank: 'rank'
  };

  export type Sub_ueScalarFieldEnum = (typeof Sub_ueScalarFieldEnum)[keyof typeof Sub_ueScalarFieldEnum]


  export const TopicScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    name: 'name',
    sub_ue_id: 'sub_ue_id',
    rank: 'rank',
    course_content: 'course_content'
  };

  export type TopicScalarFieldEnum = (typeof TopicScalarFieldEnum)[keyof typeof TopicScalarFieldEnum]


  export const CardScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    topic_id: 'topic_id',
    rank: 'rank',
    title: 'title',
    content: 'content'
  };

  export type CardScalarFieldEnum = (typeof CardScalarFieldEnum)[keyof typeof CardScalarFieldEnum]


  export const Case_studyScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    topic_id: 'topic_id',
    rank: 'rank',
    title: 'title',
    content: 'content'
  };

  export type Case_studyScalarFieldEnum = (typeof Case_studyScalarFieldEnum)[keyof typeof Case_studyScalarFieldEnum]


  export const QuizScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    topic_id: 'topic_id',
    rank: 'rank',
    title: 'title',
    question: 'question'
  };

  export type QuizScalarFieldEnum = (typeof QuizScalarFieldEnum)[keyof typeof QuizScalarFieldEnum]


  export const Quiz_choiceScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    quiz_id: 'quiz_id',
    rank: 'rank',
    text: 'text',
    answer: 'answer',
    comment: 'comment',
    positive_points: 'positive_points',
    negative_points: 'negative_points'
  };

  export type Quiz_choiceScalarFieldEnum = (typeof Quiz_choiceScalarFieldEnum)[keyof typeof Quiz_choiceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type user_actionWhereInput = {
    AND?: Enumerable<user_actionWhereInput>
    OR?: Enumerable<user_actionWhereInput>
    NOT?: Enumerable<user_actionWhereInput>
    id?: IntFilter | number
    time?: DateTimeFilter | Date | string
    user_id?: IntFilter | number
    action?: StringFilter | string
    user?: XOR<UserRelationFilter, userWhereInput>
  }

  export type user_actionOrderByWithRelationInput = {
    id?: SortOrder
    time?: SortOrder
    user_id?: SortOrder
    action?: SortOrder
    user?: userOrderByWithRelationInput
  }

  export type user_actionWhereUniqueInput = {
    id?: number
  }

  export type user_actionOrderByWithAggregationInput = {
    id?: SortOrder
    time?: SortOrder
    user_id?: SortOrder
    action?: SortOrder
    _count?: user_actionCountOrderByAggregateInput
    _avg?: user_actionAvgOrderByAggregateInput
    _max?: user_actionMaxOrderByAggregateInput
    _min?: user_actionMinOrderByAggregateInput
    _sum?: user_actionSumOrderByAggregateInput
  }

  export type user_actionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<user_actionScalarWhereWithAggregatesInput>
    OR?: Enumerable<user_actionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<user_actionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    time?: DateTimeWithAggregatesFilter | Date | string
    user_id?: IntWithAggregatesFilter | number
    action?: StringWithAggregatesFilter | string
  }

  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    email?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    type?: EnumUserTypeFilter | UserType
    accept_cgu?: BoolNullableFilter | boolean | null
    admin?: BoolFilter | boolean
    google_id?: StringNullableFilter | string | null
    name?: StringNullableFilter | string | null
    picture?: StringNullableFilter | string | null
    user_actions?: User_actionListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    type?: SortOrder
    accept_cgu?: SortOrderInput | SortOrder
    admin?: SortOrder
    google_id?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    user_actions?: user_actionOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = {
    id?: number
    email?: string
    google_id?: string
  }

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    type?: SortOrder
    accept_cgu?: SortOrderInput | SortOrder
    admin?: SortOrder
    google_id?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    email?: StringNullableWithAggregatesFilter | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    type?: EnumUserTypeWithAggregatesFilter | UserType
    accept_cgu?: BoolNullableWithAggregatesFilter | boolean | null
    admin?: BoolWithAggregatesFilter | boolean
    google_id?: StringNullableWithAggregatesFilter | string | null
    name?: StringNullableWithAggregatesFilter | string | null
    picture?: StringNullableWithAggregatesFilter | string | null
  }

  export type ueWhereInput = {
    AND?: Enumerable<ueWhereInput>
    OR?: Enumerable<ueWhereInput>
    NOT?: Enumerable<ueWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    name?: StringFilter | string
    rank?: IntFilter | number
    sub_ue_list?: Sub_ueListRelationFilter
  }

  export type ueOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    rank?: SortOrder
    sub_ue_list?: sub_ueOrderByRelationAggregateInput
  }

  export type ueWhereUniqueInput = {
    id?: number
  }

  export type ueOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    rank?: SortOrder
    _count?: ueCountOrderByAggregateInput
    _avg?: ueAvgOrderByAggregateInput
    _max?: ueMaxOrderByAggregateInput
    _min?: ueMinOrderByAggregateInput
    _sum?: ueSumOrderByAggregateInput
  }

  export type ueScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ueScalarWhereWithAggregatesInput>
    OR?: Enumerable<ueScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ueScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    rank?: IntWithAggregatesFilter | number
  }

  export type sub_ueWhereInput = {
    AND?: Enumerable<sub_ueWhereInput>
    OR?: Enumerable<sub_ueWhereInput>
    NOT?: Enumerable<sub_ueWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    name?: StringFilter | string
    ue_id?: IntFilter | number
    rank?: IntFilter | number
    ue?: XOR<UeRelationFilter, ueWhereInput>
    topics?: TopicListRelationFilter
  }

  export type sub_ueOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    ue_id?: SortOrder
    rank?: SortOrder
    ue?: ueOrderByWithRelationInput
    topics?: topicOrderByRelationAggregateInput
  }

  export type sub_ueWhereUniqueInput = {
    id?: number
  }

  export type sub_ueOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    ue_id?: SortOrder
    rank?: SortOrder
    _count?: sub_ueCountOrderByAggregateInput
    _avg?: sub_ueAvgOrderByAggregateInput
    _max?: sub_ueMaxOrderByAggregateInput
    _min?: sub_ueMinOrderByAggregateInput
    _sum?: sub_ueSumOrderByAggregateInput
  }

  export type sub_ueScalarWhereWithAggregatesInput = {
    AND?: Enumerable<sub_ueScalarWhereWithAggregatesInput>
    OR?: Enumerable<sub_ueScalarWhereWithAggregatesInput>
    NOT?: Enumerable<sub_ueScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    ue_id?: IntWithAggregatesFilter | number
    rank?: IntWithAggregatesFilter | number
  }

  export type topicWhereInput = {
    AND?: Enumerable<topicWhereInput>
    OR?: Enumerable<topicWhereInput>
    NOT?: Enumerable<topicWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    name?: StringFilter | string
    sub_ue_id?: IntFilter | number
    rank?: IntFilter | number
    course_content?: StringFilter | string
    sub_ue?: XOR<Sub_ueRelationFilter, sub_ueWhereInput>
    cards?: CardListRelationFilter
    case_studies?: Case_studyListRelationFilter
    quizes?: QuizListRelationFilter
  }

  export type topicOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    sub_ue_id?: SortOrder
    rank?: SortOrder
    course_content?: SortOrder
    sub_ue?: sub_ueOrderByWithRelationInput
    cards?: cardOrderByRelationAggregateInput
    case_studies?: case_studyOrderByRelationAggregateInput
    quizes?: quizOrderByRelationAggregateInput
  }

  export type topicWhereUniqueInput = {
    id?: number
  }

  export type topicOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    sub_ue_id?: SortOrder
    rank?: SortOrder
    course_content?: SortOrder
    _count?: topicCountOrderByAggregateInput
    _avg?: topicAvgOrderByAggregateInput
    _max?: topicMaxOrderByAggregateInput
    _min?: topicMinOrderByAggregateInput
    _sum?: topicSumOrderByAggregateInput
  }

  export type topicScalarWhereWithAggregatesInput = {
    AND?: Enumerable<topicScalarWhereWithAggregatesInput>
    OR?: Enumerable<topicScalarWhereWithAggregatesInput>
    NOT?: Enumerable<topicScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    sub_ue_id?: IntWithAggregatesFilter | number
    rank?: IntWithAggregatesFilter | number
    course_content?: StringWithAggregatesFilter | string
  }

  export type cardWhereInput = {
    AND?: Enumerable<cardWhereInput>
    OR?: Enumerable<cardWhereInput>
    NOT?: Enumerable<cardWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    topic_id?: IntFilter | number
    rank?: IntFilter | number
    title?: StringFilter | string
    content?: StringFilter | string
    topic?: XOR<TopicRelationFilter, topicWhereInput>
  }

  export type cardOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    content?: SortOrder
    topic?: topicOrderByWithRelationInput
  }

  export type cardWhereUniqueInput = {
    id?: number
  }

  export type cardOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    content?: SortOrder
    _count?: cardCountOrderByAggregateInput
    _avg?: cardAvgOrderByAggregateInput
    _max?: cardMaxOrderByAggregateInput
    _min?: cardMinOrderByAggregateInput
    _sum?: cardSumOrderByAggregateInput
  }

  export type cardScalarWhereWithAggregatesInput = {
    AND?: Enumerable<cardScalarWhereWithAggregatesInput>
    OR?: Enumerable<cardScalarWhereWithAggregatesInput>
    NOT?: Enumerable<cardScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    topic_id?: IntWithAggregatesFilter | number
    rank?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
  }

  export type case_studyWhereInput = {
    AND?: Enumerable<case_studyWhereInput>
    OR?: Enumerable<case_studyWhereInput>
    NOT?: Enumerable<case_studyWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    topic_id?: IntFilter | number
    rank?: IntFilter | number
    title?: StringFilter | string
    content?: StringFilter | string
    topic?: XOR<TopicRelationFilter, topicWhereInput>
  }

  export type case_studyOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    content?: SortOrder
    topic?: topicOrderByWithRelationInput
  }

  export type case_studyWhereUniqueInput = {
    id?: number
  }

  export type case_studyOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    content?: SortOrder
    _count?: case_studyCountOrderByAggregateInput
    _avg?: case_studyAvgOrderByAggregateInput
    _max?: case_studyMaxOrderByAggregateInput
    _min?: case_studyMinOrderByAggregateInput
    _sum?: case_studySumOrderByAggregateInput
  }

  export type case_studyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<case_studyScalarWhereWithAggregatesInput>
    OR?: Enumerable<case_studyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<case_studyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    topic_id?: IntWithAggregatesFilter | number
    rank?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
  }

  export type quizWhereInput = {
    AND?: Enumerable<quizWhereInput>
    OR?: Enumerable<quizWhereInput>
    NOT?: Enumerable<quizWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    topic_id?: IntFilter | number
    rank?: IntFilter | number
    title?: StringFilter | string
    question?: StringFilter | string
    topic?: XOR<TopicRelationFilter, topicWhereInput>
    quiz_choices?: Quiz_choiceListRelationFilter
  }

  export type quizOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    question?: SortOrder
    topic?: topicOrderByWithRelationInput
    quiz_choices?: quiz_choiceOrderByRelationAggregateInput
  }

  export type quizWhereUniqueInput = {
    id?: number
  }

  export type quizOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    question?: SortOrder
    _count?: quizCountOrderByAggregateInput
    _avg?: quizAvgOrderByAggregateInput
    _max?: quizMaxOrderByAggregateInput
    _min?: quizMinOrderByAggregateInput
    _sum?: quizSumOrderByAggregateInput
  }

  export type quizScalarWhereWithAggregatesInput = {
    AND?: Enumerable<quizScalarWhereWithAggregatesInput>
    OR?: Enumerable<quizScalarWhereWithAggregatesInput>
    NOT?: Enumerable<quizScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    topic_id?: IntWithAggregatesFilter | number
    rank?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    question?: StringWithAggregatesFilter | string
  }

  export type quiz_choiceWhereInput = {
    AND?: Enumerable<quiz_choiceWhereInput>
    OR?: Enumerable<quiz_choiceWhereInput>
    NOT?: Enumerable<quiz_choiceWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    quiz_id?: IntFilter | number
    rank?: IntFilter | number
    text?: StringFilter | string
    answer?: BoolFilter | boolean
    comment?: StringFilter | string
    positive_points?: IntFilter | number
    negative_points?: IntFilter | number
    quiz?: XOR<QuizRelationFilter, quizWhereInput>
  }

  export type quiz_choiceOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    quiz_id?: SortOrder
    rank?: SortOrder
    text?: SortOrder
    answer?: SortOrder
    comment?: SortOrder
    positive_points?: SortOrder
    negative_points?: SortOrder
    quiz?: quizOrderByWithRelationInput
  }

  export type quiz_choiceWhereUniqueInput = {
    id?: number
  }

  export type quiz_choiceOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    quiz_id?: SortOrder
    rank?: SortOrder
    text?: SortOrder
    answer?: SortOrder
    comment?: SortOrder
    positive_points?: SortOrder
    negative_points?: SortOrder
    _count?: quiz_choiceCountOrderByAggregateInput
    _avg?: quiz_choiceAvgOrderByAggregateInput
    _max?: quiz_choiceMaxOrderByAggregateInput
    _min?: quiz_choiceMinOrderByAggregateInput
    _sum?: quiz_choiceSumOrderByAggregateInput
  }

  export type quiz_choiceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<quiz_choiceScalarWhereWithAggregatesInput>
    OR?: Enumerable<quiz_choiceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<quiz_choiceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    quiz_id?: IntWithAggregatesFilter | number
    rank?: IntWithAggregatesFilter | number
    text?: StringWithAggregatesFilter | string
    answer?: BoolWithAggregatesFilter | boolean
    comment?: StringWithAggregatesFilter | string
    positive_points?: IntWithAggregatesFilter | number
    negative_points?: IntWithAggregatesFilter | number
  }

  export type user_actionCreateInput = {
    time?: Date | string
    action: string
    user: userCreateNestedOneWithoutUser_actionsInput
  }

  export type user_actionUncheckedCreateInput = {
    id?: number
    time?: Date | string
    user_id: number
    action: string
  }

  export type user_actionUpdateInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutUser_actionsNestedInput
  }

  export type user_actionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
  }

  export type user_actionCreateManyInput = {
    id?: number
    time?: Date | string
    user_id: number
    action: string
  }

  export type user_actionUpdateManyMutationInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
  }

  export type user_actionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
  }

  export type userCreateInput = {
    created_at?: Date | string
    email?: string | null
    password?: string | null
    type?: UserType
    accept_cgu?: boolean | null
    admin?: boolean
    google_id?: string | null
    name?: string | null
    picture?: string | null
    user_actions?: user_actionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    email?: string | null
    password?: string | null
    type?: UserType
    accept_cgu?: boolean | null
    admin?: boolean
    google_id?: string | null
    name?: string | null
    picture?: string | null
    user_actions?: user_actionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    accept_cgu?: NullableBoolFieldUpdateOperationsInput | boolean | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    google_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_actions?: user_actionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    accept_cgu?: NullableBoolFieldUpdateOperationsInput | boolean | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    google_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_actions?: user_actionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: number
    created_at?: Date | string
    email?: string | null
    password?: string | null
    type?: UserType
    accept_cgu?: boolean | null
    admin?: boolean
    google_id?: string | null
    name?: string | null
    picture?: string | null
  }

  export type userUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    accept_cgu?: NullableBoolFieldUpdateOperationsInput | boolean | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    google_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    accept_cgu?: NullableBoolFieldUpdateOperationsInput | boolean | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    google_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ueCreateInput = {
    created_at?: Date | string
    name: string
    rank: number
    sub_ue_list?: sub_ueCreateNestedManyWithoutUeInput
  }

  export type ueUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    name: string
    rank: number
    sub_ue_list?: sub_ueUncheckedCreateNestedManyWithoutUeInput
  }

  export type ueUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    sub_ue_list?: sub_ueUpdateManyWithoutUeNestedInput
  }

  export type ueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    sub_ue_list?: sub_ueUncheckedUpdateManyWithoutUeNestedInput
  }

  export type ueCreateManyInput = {
    id?: number
    created_at?: Date | string
    name: string
    rank: number
  }

  export type ueUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
  }

  export type ueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
  }

  export type sub_ueCreateInput = {
    created_at?: Date | string
    name: string
    rank: number
    ue: ueCreateNestedOneWithoutSub_ue_listInput
    topics?: topicCreateNestedManyWithoutSub_ueInput
  }

  export type sub_ueUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    name: string
    ue_id: number
    rank: number
    topics?: topicUncheckedCreateNestedManyWithoutSub_ueInput
  }

  export type sub_ueUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    ue?: ueUpdateOneRequiredWithoutSub_ue_listNestedInput
    topics?: topicUpdateManyWithoutSub_ueNestedInput
  }

  export type sub_ueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    ue_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    topics?: topicUncheckedUpdateManyWithoutSub_ueNestedInput
  }

  export type sub_ueCreateManyInput = {
    id?: number
    created_at?: Date | string
    name: string
    ue_id: number
    rank: number
  }

  export type sub_ueUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
  }

  export type sub_ueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    ue_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
  }

  export type topicCreateInput = {
    created_at?: Date | string
    name: string
    rank: number
    course_content?: string
    sub_ue: sub_ueCreateNestedOneWithoutTopicsInput
    cards?: cardCreateNestedManyWithoutTopicInput
    case_studies?: case_studyCreateNestedManyWithoutTopicInput
    quizes?: quizCreateNestedManyWithoutTopicInput
  }

  export type topicUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    name: string
    sub_ue_id: number
    rank: number
    course_content?: string
    cards?: cardUncheckedCreateNestedManyWithoutTopicInput
    case_studies?: case_studyUncheckedCreateNestedManyWithoutTopicInput
    quizes?: quizUncheckedCreateNestedManyWithoutTopicInput
  }

  export type topicUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    course_content?: StringFieldUpdateOperationsInput | string
    sub_ue?: sub_ueUpdateOneRequiredWithoutTopicsNestedInput
    cards?: cardUpdateManyWithoutTopicNestedInput
    case_studies?: case_studyUpdateManyWithoutTopicNestedInput
    quizes?: quizUpdateManyWithoutTopicNestedInput
  }

  export type topicUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    sub_ue_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    course_content?: StringFieldUpdateOperationsInput | string
    cards?: cardUncheckedUpdateManyWithoutTopicNestedInput
    case_studies?: case_studyUncheckedUpdateManyWithoutTopicNestedInput
    quizes?: quizUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type topicCreateManyInput = {
    id?: number
    created_at?: Date | string
    name: string
    sub_ue_id: number
    rank: number
    course_content?: string
  }

  export type topicUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    course_content?: StringFieldUpdateOperationsInput | string
  }

  export type topicUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    sub_ue_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    course_content?: StringFieldUpdateOperationsInput | string
  }

  export type cardCreateInput = {
    created_at?: Date | string
    rank: number
    title: string
    content: string
    topic: topicCreateNestedOneWithoutCardsInput
  }

  export type cardUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    topic_id: number
    rank: number
    title: string
    content: string
  }

  export type cardUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    topic?: topicUpdateOneRequiredWithoutCardsNestedInput
  }

  export type cardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    topic_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type cardCreateManyInput = {
    id?: number
    created_at?: Date | string
    topic_id: number
    rank: number
    title: string
    content: string
  }

  export type cardUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type cardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    topic_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type case_studyCreateInput = {
    created_at?: Date | string
    rank: number
    title: string
    content: string
    topic: topicCreateNestedOneWithoutCase_studiesInput
  }

  export type case_studyUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    topic_id: number
    rank: number
    title: string
    content: string
  }

  export type case_studyUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    topic?: topicUpdateOneRequiredWithoutCase_studiesNestedInput
  }

  export type case_studyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    topic_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type case_studyCreateManyInput = {
    id?: number
    created_at?: Date | string
    topic_id: number
    rank: number
    title: string
    content: string
  }

  export type case_studyUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type case_studyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    topic_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type quizCreateInput = {
    created_at?: Date | string
    rank: number
    title: string
    question: string
    topic: topicCreateNestedOneWithoutQuizesInput
    quiz_choices?: quiz_choiceCreateNestedManyWithoutQuizInput
  }

  export type quizUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    topic_id: number
    rank: number
    title: string
    question: string
    quiz_choices?: quiz_choiceUncheckedCreateNestedManyWithoutQuizInput
  }

  export type quizUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    topic?: topicUpdateOneRequiredWithoutQuizesNestedInput
    quiz_choices?: quiz_choiceUpdateManyWithoutQuizNestedInput
  }

  export type quizUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    topic_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    quiz_choices?: quiz_choiceUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type quizCreateManyInput = {
    id?: number
    created_at?: Date | string
    topic_id: number
    rank: number
    title: string
    question: string
  }

  export type quizUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
  }

  export type quizUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    topic_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
  }

  export type quiz_choiceCreateInput = {
    created_at?: Date | string
    rank: number
    text: string
    answer: boolean
    comment: string
    positive_points: number
    negative_points: number
    quiz: quizCreateNestedOneWithoutQuiz_choicesInput
  }

  export type quiz_choiceUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    quiz_id: number
    rank: number
    text: string
    answer: boolean
    comment: string
    positive_points: number
    negative_points: number
  }

  export type quiz_choiceUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    answer?: BoolFieldUpdateOperationsInput | boolean
    comment?: StringFieldUpdateOperationsInput | string
    positive_points?: IntFieldUpdateOperationsInput | number
    negative_points?: IntFieldUpdateOperationsInput | number
    quiz?: quizUpdateOneRequiredWithoutQuiz_choicesNestedInput
  }

  export type quiz_choiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    quiz_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    answer?: BoolFieldUpdateOperationsInput | boolean
    comment?: StringFieldUpdateOperationsInput | string
    positive_points?: IntFieldUpdateOperationsInput | number
    negative_points?: IntFieldUpdateOperationsInput | number
  }

  export type quiz_choiceCreateManyInput = {
    id?: number
    created_at?: Date | string
    quiz_id: number
    rank: number
    text: string
    answer: boolean
    comment: string
    positive_points: number
    negative_points: number
  }

  export type quiz_choiceUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    answer?: BoolFieldUpdateOperationsInput | boolean
    comment?: StringFieldUpdateOperationsInput | string
    positive_points?: IntFieldUpdateOperationsInput | number
    negative_points?: IntFieldUpdateOperationsInput | number
  }

  export type quiz_choiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    quiz_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    answer?: BoolFieldUpdateOperationsInput | boolean
    comment?: StringFieldUpdateOperationsInput | string
    positive_points?: IntFieldUpdateOperationsInput | number
    negative_points?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UserRelationFilter = {
    is?: userWhereInput | null
    isNot?: userWhereInput | null
  }

  export type user_actionCountOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    user_id?: SortOrder
    action?: SortOrder
  }

  export type user_actionAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type user_actionMaxOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    user_id?: SortOrder
    action?: SortOrder
  }

  export type user_actionMinOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
    user_id?: SortOrder
    action?: SortOrder
  }

  export type user_actionSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumUserTypeFilter = {
    equals?: UserType
    in?: Enumerable<UserType>
    notIn?: Enumerable<UserType>
    not?: NestedEnumUserTypeFilter | UserType
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type User_actionListRelationFilter = {
    every?: user_actionWhereInput
    some?: user_actionWhereInput
    none?: user_actionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type user_actionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    email?: SortOrder
    password?: SortOrder
    type?: SortOrder
    accept_cgu?: SortOrder
    admin?: SortOrder
    google_id?: SortOrder
    name?: SortOrder
    picture?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    email?: SortOrder
    password?: SortOrder
    type?: SortOrder
    accept_cgu?: SortOrder
    admin?: SortOrder
    google_id?: SortOrder
    name?: SortOrder
    picture?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    email?: SortOrder
    password?: SortOrder
    type?: SortOrder
    accept_cgu?: SortOrder
    admin?: SortOrder
    google_id?: SortOrder
    name?: SortOrder
    picture?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumUserTypeWithAggregatesFilter = {
    equals?: UserType
    in?: Enumerable<UserType>
    notIn?: Enumerable<UserType>
    not?: NestedEnumUserTypeWithAggregatesFilter | UserType
    _count?: NestedIntFilter
    _min?: NestedEnumUserTypeFilter
    _max?: NestedEnumUserTypeFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type Sub_ueListRelationFilter = {
    every?: sub_ueWhereInput
    some?: sub_ueWhereInput
    none?: sub_ueWhereInput
  }

  export type sub_ueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ueCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    rank?: SortOrder
  }

  export type ueAvgOrderByAggregateInput = {
    id?: SortOrder
    rank?: SortOrder
  }

  export type ueMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    rank?: SortOrder
  }

  export type ueMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    rank?: SortOrder
  }

  export type ueSumOrderByAggregateInput = {
    id?: SortOrder
    rank?: SortOrder
  }

  export type UeRelationFilter = {
    is?: ueWhereInput | null
    isNot?: ueWhereInput | null
  }

  export type TopicListRelationFilter = {
    every?: topicWhereInput
    some?: topicWhereInput
    none?: topicWhereInput
  }

  export type topicOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sub_ueCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    ue_id?: SortOrder
    rank?: SortOrder
  }

  export type sub_ueAvgOrderByAggregateInput = {
    id?: SortOrder
    ue_id?: SortOrder
    rank?: SortOrder
  }

  export type sub_ueMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    ue_id?: SortOrder
    rank?: SortOrder
  }

  export type sub_ueMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    ue_id?: SortOrder
    rank?: SortOrder
  }

  export type sub_ueSumOrderByAggregateInput = {
    id?: SortOrder
    ue_id?: SortOrder
    rank?: SortOrder
  }

  export type Sub_ueRelationFilter = {
    is?: sub_ueWhereInput | null
    isNot?: sub_ueWhereInput | null
  }

  export type CardListRelationFilter = {
    every?: cardWhereInput
    some?: cardWhereInput
    none?: cardWhereInput
  }

  export type Case_studyListRelationFilter = {
    every?: case_studyWhereInput
    some?: case_studyWhereInput
    none?: case_studyWhereInput
  }

  export type QuizListRelationFilter = {
    every?: quizWhereInput
    some?: quizWhereInput
    none?: quizWhereInput
  }

  export type cardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type case_studyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type quizOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type topicCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    sub_ue_id?: SortOrder
    rank?: SortOrder
    course_content?: SortOrder
  }

  export type topicAvgOrderByAggregateInput = {
    id?: SortOrder
    sub_ue_id?: SortOrder
    rank?: SortOrder
  }

  export type topicMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    sub_ue_id?: SortOrder
    rank?: SortOrder
    course_content?: SortOrder
  }

  export type topicMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    sub_ue_id?: SortOrder
    rank?: SortOrder
    course_content?: SortOrder
  }

  export type topicSumOrderByAggregateInput = {
    id?: SortOrder
    sub_ue_id?: SortOrder
    rank?: SortOrder
  }

  export type TopicRelationFilter = {
    is?: topicWhereInput | null
    isNot?: topicWhereInput | null
  }

  export type cardCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type cardAvgOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
  }

  export type cardMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type cardMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type cardSumOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
  }

  export type case_studyCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type case_studyAvgOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
  }

  export type case_studyMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type case_studyMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type case_studySumOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
  }

  export type Quiz_choiceListRelationFilter = {
    every?: quiz_choiceWhereInput
    some?: quiz_choiceWhereInput
    none?: quiz_choiceWhereInput
  }

  export type quiz_choiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type quizCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    question?: SortOrder
  }

  export type quizAvgOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
  }

  export type quizMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    question?: SortOrder
  }

  export type quizMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
    title?: SortOrder
    question?: SortOrder
  }

  export type quizSumOrderByAggregateInput = {
    id?: SortOrder
    topic_id?: SortOrder
    rank?: SortOrder
  }

  export type QuizRelationFilter = {
    is?: quizWhereInput | null
    isNot?: quizWhereInput | null
  }

  export type quiz_choiceCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    quiz_id?: SortOrder
    rank?: SortOrder
    text?: SortOrder
    answer?: SortOrder
    comment?: SortOrder
    positive_points?: SortOrder
    negative_points?: SortOrder
  }

  export type quiz_choiceAvgOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    rank?: SortOrder
    positive_points?: SortOrder
    negative_points?: SortOrder
  }

  export type quiz_choiceMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    quiz_id?: SortOrder
    rank?: SortOrder
    text?: SortOrder
    answer?: SortOrder
    comment?: SortOrder
    positive_points?: SortOrder
    negative_points?: SortOrder
  }

  export type quiz_choiceMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    quiz_id?: SortOrder
    rank?: SortOrder
    text?: SortOrder
    answer?: SortOrder
    comment?: SortOrder
    positive_points?: SortOrder
    negative_points?: SortOrder
  }

  export type quiz_choiceSumOrderByAggregateInput = {
    id?: SortOrder
    quiz_id?: SortOrder
    rank?: SortOrder
    positive_points?: SortOrder
    negative_points?: SortOrder
  }

  export type userCreateNestedOneWithoutUser_actionsInput = {
    create?: XOR<userCreateWithoutUser_actionsInput, userUncheckedCreateWithoutUser_actionsInput>
    connectOrCreate?: userCreateOrConnectWithoutUser_actionsInput
    connect?: userWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type userUpdateOneRequiredWithoutUser_actionsNestedInput = {
    create?: XOR<userCreateWithoutUser_actionsInput, userUncheckedCreateWithoutUser_actionsInput>
    connectOrCreate?: userCreateOrConnectWithoutUser_actionsInput
    upsert?: userUpsertWithoutUser_actionsInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutUser_actionsInput, userUncheckedUpdateWithoutUser_actionsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type user_actionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<user_actionCreateWithoutUserInput>, Enumerable<user_actionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_actionCreateOrConnectWithoutUserInput>
    createMany?: user_actionCreateManyUserInputEnvelope
    connect?: Enumerable<user_actionWhereUniqueInput>
  }

  export type user_actionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<user_actionCreateWithoutUserInput>, Enumerable<user_actionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_actionCreateOrConnectWithoutUserInput>
    createMany?: user_actionCreateManyUserInputEnvelope
    connect?: Enumerable<user_actionWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserTypeFieldUpdateOperationsInput = {
    set?: UserType
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type user_actionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<user_actionCreateWithoutUserInput>, Enumerable<user_actionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_actionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<user_actionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: user_actionCreateManyUserInputEnvelope
    set?: Enumerable<user_actionWhereUniqueInput>
    disconnect?: Enumerable<user_actionWhereUniqueInput>
    delete?: Enumerable<user_actionWhereUniqueInput>
    connect?: Enumerable<user_actionWhereUniqueInput>
    update?: Enumerable<user_actionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<user_actionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<user_actionScalarWhereInput>
  }

  export type user_actionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<user_actionCreateWithoutUserInput>, Enumerable<user_actionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_actionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<user_actionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: user_actionCreateManyUserInputEnvelope
    set?: Enumerable<user_actionWhereUniqueInput>
    disconnect?: Enumerable<user_actionWhereUniqueInput>
    delete?: Enumerable<user_actionWhereUniqueInput>
    connect?: Enumerable<user_actionWhereUniqueInput>
    update?: Enumerable<user_actionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<user_actionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<user_actionScalarWhereInput>
  }

  export type sub_ueCreateNestedManyWithoutUeInput = {
    create?: XOR<Enumerable<sub_ueCreateWithoutUeInput>, Enumerable<sub_ueUncheckedCreateWithoutUeInput>>
    connectOrCreate?: Enumerable<sub_ueCreateOrConnectWithoutUeInput>
    createMany?: sub_ueCreateManyUeInputEnvelope
    connect?: Enumerable<sub_ueWhereUniqueInput>
  }

  export type sub_ueUncheckedCreateNestedManyWithoutUeInput = {
    create?: XOR<Enumerable<sub_ueCreateWithoutUeInput>, Enumerable<sub_ueUncheckedCreateWithoutUeInput>>
    connectOrCreate?: Enumerable<sub_ueCreateOrConnectWithoutUeInput>
    createMany?: sub_ueCreateManyUeInputEnvelope
    connect?: Enumerable<sub_ueWhereUniqueInput>
  }

  export type sub_ueUpdateManyWithoutUeNestedInput = {
    create?: XOR<Enumerable<sub_ueCreateWithoutUeInput>, Enumerable<sub_ueUncheckedCreateWithoutUeInput>>
    connectOrCreate?: Enumerable<sub_ueCreateOrConnectWithoutUeInput>
    upsert?: Enumerable<sub_ueUpsertWithWhereUniqueWithoutUeInput>
    createMany?: sub_ueCreateManyUeInputEnvelope
    set?: Enumerable<sub_ueWhereUniqueInput>
    disconnect?: Enumerable<sub_ueWhereUniqueInput>
    delete?: Enumerable<sub_ueWhereUniqueInput>
    connect?: Enumerable<sub_ueWhereUniqueInput>
    update?: Enumerable<sub_ueUpdateWithWhereUniqueWithoutUeInput>
    updateMany?: Enumerable<sub_ueUpdateManyWithWhereWithoutUeInput>
    deleteMany?: Enumerable<sub_ueScalarWhereInput>
  }

  export type sub_ueUncheckedUpdateManyWithoutUeNestedInput = {
    create?: XOR<Enumerable<sub_ueCreateWithoutUeInput>, Enumerable<sub_ueUncheckedCreateWithoutUeInput>>
    connectOrCreate?: Enumerable<sub_ueCreateOrConnectWithoutUeInput>
    upsert?: Enumerable<sub_ueUpsertWithWhereUniqueWithoutUeInput>
    createMany?: sub_ueCreateManyUeInputEnvelope
    set?: Enumerable<sub_ueWhereUniqueInput>
    disconnect?: Enumerable<sub_ueWhereUniqueInput>
    delete?: Enumerable<sub_ueWhereUniqueInput>
    connect?: Enumerable<sub_ueWhereUniqueInput>
    update?: Enumerable<sub_ueUpdateWithWhereUniqueWithoutUeInput>
    updateMany?: Enumerable<sub_ueUpdateManyWithWhereWithoutUeInput>
    deleteMany?: Enumerable<sub_ueScalarWhereInput>
  }

  export type ueCreateNestedOneWithoutSub_ue_listInput = {
    create?: XOR<ueCreateWithoutSub_ue_listInput, ueUncheckedCreateWithoutSub_ue_listInput>
    connectOrCreate?: ueCreateOrConnectWithoutSub_ue_listInput
    connect?: ueWhereUniqueInput
  }

  export type topicCreateNestedManyWithoutSub_ueInput = {
    create?: XOR<Enumerable<topicCreateWithoutSub_ueInput>, Enumerable<topicUncheckedCreateWithoutSub_ueInput>>
    connectOrCreate?: Enumerable<topicCreateOrConnectWithoutSub_ueInput>
    createMany?: topicCreateManySub_ueInputEnvelope
    connect?: Enumerable<topicWhereUniqueInput>
  }

  export type topicUncheckedCreateNestedManyWithoutSub_ueInput = {
    create?: XOR<Enumerable<topicCreateWithoutSub_ueInput>, Enumerable<topicUncheckedCreateWithoutSub_ueInput>>
    connectOrCreate?: Enumerable<topicCreateOrConnectWithoutSub_ueInput>
    createMany?: topicCreateManySub_ueInputEnvelope
    connect?: Enumerable<topicWhereUniqueInput>
  }

  export type ueUpdateOneRequiredWithoutSub_ue_listNestedInput = {
    create?: XOR<ueCreateWithoutSub_ue_listInput, ueUncheckedCreateWithoutSub_ue_listInput>
    connectOrCreate?: ueCreateOrConnectWithoutSub_ue_listInput
    upsert?: ueUpsertWithoutSub_ue_listInput
    connect?: ueWhereUniqueInput
    update?: XOR<ueUpdateWithoutSub_ue_listInput, ueUncheckedUpdateWithoutSub_ue_listInput>
  }

  export type topicUpdateManyWithoutSub_ueNestedInput = {
    create?: XOR<Enumerable<topicCreateWithoutSub_ueInput>, Enumerable<topicUncheckedCreateWithoutSub_ueInput>>
    connectOrCreate?: Enumerable<topicCreateOrConnectWithoutSub_ueInput>
    upsert?: Enumerable<topicUpsertWithWhereUniqueWithoutSub_ueInput>
    createMany?: topicCreateManySub_ueInputEnvelope
    set?: Enumerable<topicWhereUniqueInput>
    disconnect?: Enumerable<topicWhereUniqueInput>
    delete?: Enumerable<topicWhereUniqueInput>
    connect?: Enumerable<topicWhereUniqueInput>
    update?: Enumerable<topicUpdateWithWhereUniqueWithoutSub_ueInput>
    updateMany?: Enumerable<topicUpdateManyWithWhereWithoutSub_ueInput>
    deleteMany?: Enumerable<topicScalarWhereInput>
  }

  export type topicUncheckedUpdateManyWithoutSub_ueNestedInput = {
    create?: XOR<Enumerable<topicCreateWithoutSub_ueInput>, Enumerable<topicUncheckedCreateWithoutSub_ueInput>>
    connectOrCreate?: Enumerable<topicCreateOrConnectWithoutSub_ueInput>
    upsert?: Enumerable<topicUpsertWithWhereUniqueWithoutSub_ueInput>
    createMany?: topicCreateManySub_ueInputEnvelope
    set?: Enumerable<topicWhereUniqueInput>
    disconnect?: Enumerable<topicWhereUniqueInput>
    delete?: Enumerable<topicWhereUniqueInput>
    connect?: Enumerable<topicWhereUniqueInput>
    update?: Enumerable<topicUpdateWithWhereUniqueWithoutSub_ueInput>
    updateMany?: Enumerable<topicUpdateManyWithWhereWithoutSub_ueInput>
    deleteMany?: Enumerable<topicScalarWhereInput>
  }

  export type sub_ueCreateNestedOneWithoutTopicsInput = {
    create?: XOR<sub_ueCreateWithoutTopicsInput, sub_ueUncheckedCreateWithoutTopicsInput>
    connectOrCreate?: sub_ueCreateOrConnectWithoutTopicsInput
    connect?: sub_ueWhereUniqueInput
  }

  export type cardCreateNestedManyWithoutTopicInput = {
    create?: XOR<Enumerable<cardCreateWithoutTopicInput>, Enumerable<cardUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<cardCreateOrConnectWithoutTopicInput>
    createMany?: cardCreateManyTopicInputEnvelope
    connect?: Enumerable<cardWhereUniqueInput>
  }

  export type case_studyCreateNestedManyWithoutTopicInput = {
    create?: XOR<Enumerable<case_studyCreateWithoutTopicInput>, Enumerable<case_studyUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<case_studyCreateOrConnectWithoutTopicInput>
    createMany?: case_studyCreateManyTopicInputEnvelope
    connect?: Enumerable<case_studyWhereUniqueInput>
  }

  export type quizCreateNestedManyWithoutTopicInput = {
    create?: XOR<Enumerable<quizCreateWithoutTopicInput>, Enumerable<quizUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<quizCreateOrConnectWithoutTopicInput>
    createMany?: quizCreateManyTopicInputEnvelope
    connect?: Enumerable<quizWhereUniqueInput>
  }

  export type cardUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<Enumerable<cardCreateWithoutTopicInput>, Enumerable<cardUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<cardCreateOrConnectWithoutTopicInput>
    createMany?: cardCreateManyTopicInputEnvelope
    connect?: Enumerable<cardWhereUniqueInput>
  }

  export type case_studyUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<Enumerable<case_studyCreateWithoutTopicInput>, Enumerable<case_studyUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<case_studyCreateOrConnectWithoutTopicInput>
    createMany?: case_studyCreateManyTopicInputEnvelope
    connect?: Enumerable<case_studyWhereUniqueInput>
  }

  export type quizUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<Enumerable<quizCreateWithoutTopicInput>, Enumerable<quizUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<quizCreateOrConnectWithoutTopicInput>
    createMany?: quizCreateManyTopicInputEnvelope
    connect?: Enumerable<quizWhereUniqueInput>
  }

  export type sub_ueUpdateOneRequiredWithoutTopicsNestedInput = {
    create?: XOR<sub_ueCreateWithoutTopicsInput, sub_ueUncheckedCreateWithoutTopicsInput>
    connectOrCreate?: sub_ueCreateOrConnectWithoutTopicsInput
    upsert?: sub_ueUpsertWithoutTopicsInput
    connect?: sub_ueWhereUniqueInput
    update?: XOR<sub_ueUpdateWithoutTopicsInput, sub_ueUncheckedUpdateWithoutTopicsInput>
  }

  export type cardUpdateManyWithoutTopicNestedInput = {
    create?: XOR<Enumerable<cardCreateWithoutTopicInput>, Enumerable<cardUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<cardCreateOrConnectWithoutTopicInput>
    upsert?: Enumerable<cardUpsertWithWhereUniqueWithoutTopicInput>
    createMany?: cardCreateManyTopicInputEnvelope
    set?: Enumerable<cardWhereUniqueInput>
    disconnect?: Enumerable<cardWhereUniqueInput>
    delete?: Enumerable<cardWhereUniqueInput>
    connect?: Enumerable<cardWhereUniqueInput>
    update?: Enumerable<cardUpdateWithWhereUniqueWithoutTopicInput>
    updateMany?: Enumerable<cardUpdateManyWithWhereWithoutTopicInput>
    deleteMany?: Enumerable<cardScalarWhereInput>
  }

  export type case_studyUpdateManyWithoutTopicNestedInput = {
    create?: XOR<Enumerable<case_studyCreateWithoutTopicInput>, Enumerable<case_studyUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<case_studyCreateOrConnectWithoutTopicInput>
    upsert?: Enumerable<case_studyUpsertWithWhereUniqueWithoutTopicInput>
    createMany?: case_studyCreateManyTopicInputEnvelope
    set?: Enumerable<case_studyWhereUniqueInput>
    disconnect?: Enumerable<case_studyWhereUniqueInput>
    delete?: Enumerable<case_studyWhereUniqueInput>
    connect?: Enumerable<case_studyWhereUniqueInput>
    update?: Enumerable<case_studyUpdateWithWhereUniqueWithoutTopicInput>
    updateMany?: Enumerable<case_studyUpdateManyWithWhereWithoutTopicInput>
    deleteMany?: Enumerable<case_studyScalarWhereInput>
  }

  export type quizUpdateManyWithoutTopicNestedInput = {
    create?: XOR<Enumerable<quizCreateWithoutTopicInput>, Enumerable<quizUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<quizCreateOrConnectWithoutTopicInput>
    upsert?: Enumerable<quizUpsertWithWhereUniqueWithoutTopicInput>
    createMany?: quizCreateManyTopicInputEnvelope
    set?: Enumerable<quizWhereUniqueInput>
    disconnect?: Enumerable<quizWhereUniqueInput>
    delete?: Enumerable<quizWhereUniqueInput>
    connect?: Enumerable<quizWhereUniqueInput>
    update?: Enumerable<quizUpdateWithWhereUniqueWithoutTopicInput>
    updateMany?: Enumerable<quizUpdateManyWithWhereWithoutTopicInput>
    deleteMany?: Enumerable<quizScalarWhereInput>
  }

  export type cardUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<Enumerable<cardCreateWithoutTopicInput>, Enumerable<cardUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<cardCreateOrConnectWithoutTopicInput>
    upsert?: Enumerable<cardUpsertWithWhereUniqueWithoutTopicInput>
    createMany?: cardCreateManyTopicInputEnvelope
    set?: Enumerable<cardWhereUniqueInput>
    disconnect?: Enumerable<cardWhereUniqueInput>
    delete?: Enumerable<cardWhereUniqueInput>
    connect?: Enumerable<cardWhereUniqueInput>
    update?: Enumerable<cardUpdateWithWhereUniqueWithoutTopicInput>
    updateMany?: Enumerable<cardUpdateManyWithWhereWithoutTopicInput>
    deleteMany?: Enumerable<cardScalarWhereInput>
  }

  export type case_studyUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<Enumerable<case_studyCreateWithoutTopicInput>, Enumerable<case_studyUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<case_studyCreateOrConnectWithoutTopicInput>
    upsert?: Enumerable<case_studyUpsertWithWhereUniqueWithoutTopicInput>
    createMany?: case_studyCreateManyTopicInputEnvelope
    set?: Enumerable<case_studyWhereUniqueInput>
    disconnect?: Enumerable<case_studyWhereUniqueInput>
    delete?: Enumerable<case_studyWhereUniqueInput>
    connect?: Enumerable<case_studyWhereUniqueInput>
    update?: Enumerable<case_studyUpdateWithWhereUniqueWithoutTopicInput>
    updateMany?: Enumerable<case_studyUpdateManyWithWhereWithoutTopicInput>
    deleteMany?: Enumerable<case_studyScalarWhereInput>
  }

  export type quizUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<Enumerable<quizCreateWithoutTopicInput>, Enumerable<quizUncheckedCreateWithoutTopicInput>>
    connectOrCreate?: Enumerable<quizCreateOrConnectWithoutTopicInput>
    upsert?: Enumerable<quizUpsertWithWhereUniqueWithoutTopicInput>
    createMany?: quizCreateManyTopicInputEnvelope
    set?: Enumerable<quizWhereUniqueInput>
    disconnect?: Enumerable<quizWhereUniqueInput>
    delete?: Enumerable<quizWhereUniqueInput>
    connect?: Enumerable<quizWhereUniqueInput>
    update?: Enumerable<quizUpdateWithWhereUniqueWithoutTopicInput>
    updateMany?: Enumerable<quizUpdateManyWithWhereWithoutTopicInput>
    deleteMany?: Enumerable<quizScalarWhereInput>
  }

  export type topicCreateNestedOneWithoutCardsInput = {
    create?: XOR<topicCreateWithoutCardsInput, topicUncheckedCreateWithoutCardsInput>
    connectOrCreate?: topicCreateOrConnectWithoutCardsInput
    connect?: topicWhereUniqueInput
  }

  export type topicUpdateOneRequiredWithoutCardsNestedInput = {
    create?: XOR<topicCreateWithoutCardsInput, topicUncheckedCreateWithoutCardsInput>
    connectOrCreate?: topicCreateOrConnectWithoutCardsInput
    upsert?: topicUpsertWithoutCardsInput
    connect?: topicWhereUniqueInput
    update?: XOR<topicUpdateWithoutCardsInput, topicUncheckedUpdateWithoutCardsInput>
  }

  export type topicCreateNestedOneWithoutCase_studiesInput = {
    create?: XOR<topicCreateWithoutCase_studiesInput, topicUncheckedCreateWithoutCase_studiesInput>
    connectOrCreate?: topicCreateOrConnectWithoutCase_studiesInput
    connect?: topicWhereUniqueInput
  }

  export type topicUpdateOneRequiredWithoutCase_studiesNestedInput = {
    create?: XOR<topicCreateWithoutCase_studiesInput, topicUncheckedCreateWithoutCase_studiesInput>
    connectOrCreate?: topicCreateOrConnectWithoutCase_studiesInput
    upsert?: topicUpsertWithoutCase_studiesInput
    connect?: topicWhereUniqueInput
    update?: XOR<topicUpdateWithoutCase_studiesInput, topicUncheckedUpdateWithoutCase_studiesInput>
  }

  export type topicCreateNestedOneWithoutQuizesInput = {
    create?: XOR<topicCreateWithoutQuizesInput, topicUncheckedCreateWithoutQuizesInput>
    connectOrCreate?: topicCreateOrConnectWithoutQuizesInput
    connect?: topicWhereUniqueInput
  }

  export type quiz_choiceCreateNestedManyWithoutQuizInput = {
    create?: XOR<Enumerable<quiz_choiceCreateWithoutQuizInput>, Enumerable<quiz_choiceUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<quiz_choiceCreateOrConnectWithoutQuizInput>
    createMany?: quiz_choiceCreateManyQuizInputEnvelope
    connect?: Enumerable<quiz_choiceWhereUniqueInput>
  }

  export type quiz_choiceUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<Enumerable<quiz_choiceCreateWithoutQuizInput>, Enumerable<quiz_choiceUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<quiz_choiceCreateOrConnectWithoutQuizInput>
    createMany?: quiz_choiceCreateManyQuizInputEnvelope
    connect?: Enumerable<quiz_choiceWhereUniqueInput>
  }

  export type topicUpdateOneRequiredWithoutQuizesNestedInput = {
    create?: XOR<topicCreateWithoutQuizesInput, topicUncheckedCreateWithoutQuizesInput>
    connectOrCreate?: topicCreateOrConnectWithoutQuizesInput
    upsert?: topicUpsertWithoutQuizesInput
    connect?: topicWhereUniqueInput
    update?: XOR<topicUpdateWithoutQuizesInput, topicUncheckedUpdateWithoutQuizesInput>
  }

  export type quiz_choiceUpdateManyWithoutQuizNestedInput = {
    create?: XOR<Enumerable<quiz_choiceCreateWithoutQuizInput>, Enumerable<quiz_choiceUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<quiz_choiceCreateOrConnectWithoutQuizInput>
    upsert?: Enumerable<quiz_choiceUpsertWithWhereUniqueWithoutQuizInput>
    createMany?: quiz_choiceCreateManyQuizInputEnvelope
    set?: Enumerable<quiz_choiceWhereUniqueInput>
    disconnect?: Enumerable<quiz_choiceWhereUniqueInput>
    delete?: Enumerable<quiz_choiceWhereUniqueInput>
    connect?: Enumerable<quiz_choiceWhereUniqueInput>
    update?: Enumerable<quiz_choiceUpdateWithWhereUniqueWithoutQuizInput>
    updateMany?: Enumerable<quiz_choiceUpdateManyWithWhereWithoutQuizInput>
    deleteMany?: Enumerable<quiz_choiceScalarWhereInput>
  }

  export type quiz_choiceUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<Enumerable<quiz_choiceCreateWithoutQuizInput>, Enumerable<quiz_choiceUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<quiz_choiceCreateOrConnectWithoutQuizInput>
    upsert?: Enumerable<quiz_choiceUpsertWithWhereUniqueWithoutQuizInput>
    createMany?: quiz_choiceCreateManyQuizInputEnvelope
    set?: Enumerable<quiz_choiceWhereUniqueInput>
    disconnect?: Enumerable<quiz_choiceWhereUniqueInput>
    delete?: Enumerable<quiz_choiceWhereUniqueInput>
    connect?: Enumerable<quiz_choiceWhereUniqueInput>
    update?: Enumerable<quiz_choiceUpdateWithWhereUniqueWithoutQuizInput>
    updateMany?: Enumerable<quiz_choiceUpdateManyWithWhereWithoutQuizInput>
    deleteMany?: Enumerable<quiz_choiceScalarWhereInput>
  }

  export type quizCreateNestedOneWithoutQuiz_choicesInput = {
    create?: XOR<quizCreateWithoutQuiz_choicesInput, quizUncheckedCreateWithoutQuiz_choicesInput>
    connectOrCreate?: quizCreateOrConnectWithoutQuiz_choicesInput
    connect?: quizWhereUniqueInput
  }

  export type quizUpdateOneRequiredWithoutQuiz_choicesNestedInput = {
    create?: XOR<quizCreateWithoutQuiz_choicesInput, quizUncheckedCreateWithoutQuiz_choicesInput>
    connectOrCreate?: quizCreateOrConnectWithoutQuiz_choicesInput
    upsert?: quizUpsertWithoutQuiz_choicesInput
    connect?: quizWhereUniqueInput
    update?: XOR<quizUpdateWithoutQuiz_choicesInput, quizUncheckedUpdateWithoutQuiz_choicesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumUserTypeFilter = {
    equals?: UserType
    in?: Enumerable<UserType>
    notIn?: Enumerable<UserType>
    not?: NestedEnumUserTypeFilter | UserType
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumUserTypeWithAggregatesFilter = {
    equals?: UserType
    in?: Enumerable<UserType>
    notIn?: Enumerable<UserType>
    not?: NestedEnumUserTypeWithAggregatesFilter | UserType
    _count?: NestedIntFilter
    _min?: NestedEnumUserTypeFilter
    _max?: NestedEnumUserTypeFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type userCreateWithoutUser_actionsInput = {
    created_at?: Date | string
    email?: string | null
    password?: string | null
    type?: UserType
    accept_cgu?: boolean | null
    admin?: boolean
    google_id?: string | null
    name?: string | null
    picture?: string | null
  }

  export type userUncheckedCreateWithoutUser_actionsInput = {
    id?: number
    created_at?: Date | string
    email?: string | null
    password?: string | null
    type?: UserType
    accept_cgu?: boolean | null
    admin?: boolean
    google_id?: string | null
    name?: string | null
    picture?: string | null
  }

  export type userCreateOrConnectWithoutUser_actionsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutUser_actionsInput, userUncheckedCreateWithoutUser_actionsInput>
  }

  export type userUpsertWithoutUser_actionsInput = {
    update: XOR<userUpdateWithoutUser_actionsInput, userUncheckedUpdateWithoutUser_actionsInput>
    create: XOR<userCreateWithoutUser_actionsInput, userUncheckedCreateWithoutUser_actionsInput>
  }

  export type userUpdateWithoutUser_actionsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    accept_cgu?: NullableBoolFieldUpdateOperationsInput | boolean | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    google_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userUncheckedUpdateWithoutUser_actionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumUserTypeFieldUpdateOperationsInput | UserType
    accept_cgu?: NullableBoolFieldUpdateOperationsInput | boolean | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    google_id?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_actionCreateWithoutUserInput = {
    time?: Date | string
    action: string
  }

  export type user_actionUncheckedCreateWithoutUserInput = {
    id?: number
    time?: Date | string
    action: string
  }

  export type user_actionCreateOrConnectWithoutUserInput = {
    where: user_actionWhereUniqueInput
    create: XOR<user_actionCreateWithoutUserInput, user_actionUncheckedCreateWithoutUserInput>
  }

  export type user_actionCreateManyUserInputEnvelope = {
    data: Enumerable<user_actionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type user_actionUpsertWithWhereUniqueWithoutUserInput = {
    where: user_actionWhereUniqueInput
    update: XOR<user_actionUpdateWithoutUserInput, user_actionUncheckedUpdateWithoutUserInput>
    create: XOR<user_actionCreateWithoutUserInput, user_actionUncheckedCreateWithoutUserInput>
  }

  export type user_actionUpdateWithWhereUniqueWithoutUserInput = {
    where: user_actionWhereUniqueInput
    data: XOR<user_actionUpdateWithoutUserInput, user_actionUncheckedUpdateWithoutUserInput>
  }

  export type user_actionUpdateManyWithWhereWithoutUserInput = {
    where: user_actionScalarWhereInput
    data: XOR<user_actionUpdateManyMutationInput, user_actionUncheckedUpdateManyWithoutUser_actionsInput>
  }

  export type user_actionScalarWhereInput = {
    AND?: Enumerable<user_actionScalarWhereInput>
    OR?: Enumerable<user_actionScalarWhereInput>
    NOT?: Enumerable<user_actionScalarWhereInput>
    id?: IntFilter | number
    time?: DateTimeFilter | Date | string
    user_id?: IntFilter | number
    action?: StringFilter | string
  }

  export type sub_ueCreateWithoutUeInput = {
    created_at?: Date | string
    name: string
    rank: number
    topics?: topicCreateNestedManyWithoutSub_ueInput
  }

  export type sub_ueUncheckedCreateWithoutUeInput = {
    id?: number
    created_at?: Date | string
    name: string
    rank: number
    topics?: topicUncheckedCreateNestedManyWithoutSub_ueInput
  }

  export type sub_ueCreateOrConnectWithoutUeInput = {
    where: sub_ueWhereUniqueInput
    create: XOR<sub_ueCreateWithoutUeInput, sub_ueUncheckedCreateWithoutUeInput>
  }

  export type sub_ueCreateManyUeInputEnvelope = {
    data: Enumerable<sub_ueCreateManyUeInput>
    skipDuplicates?: boolean
  }

  export type sub_ueUpsertWithWhereUniqueWithoutUeInput = {
    where: sub_ueWhereUniqueInput
    update: XOR<sub_ueUpdateWithoutUeInput, sub_ueUncheckedUpdateWithoutUeInput>
    create: XOR<sub_ueCreateWithoutUeInput, sub_ueUncheckedCreateWithoutUeInput>
  }

  export type sub_ueUpdateWithWhereUniqueWithoutUeInput = {
    where: sub_ueWhereUniqueInput
    data: XOR<sub_ueUpdateWithoutUeInput, sub_ueUncheckedUpdateWithoutUeInput>
  }

  export type sub_ueUpdateManyWithWhereWithoutUeInput = {
    where: sub_ueScalarWhereInput
    data: XOR<sub_ueUpdateManyMutationInput, sub_ueUncheckedUpdateManyWithoutSub_ue_listInput>
  }

  export type sub_ueScalarWhereInput = {
    AND?: Enumerable<sub_ueScalarWhereInput>
    OR?: Enumerable<sub_ueScalarWhereInput>
    NOT?: Enumerable<sub_ueScalarWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    name?: StringFilter | string
    ue_id?: IntFilter | number
    rank?: IntFilter | number
  }

  export type ueCreateWithoutSub_ue_listInput = {
    created_at?: Date | string
    name: string
    rank: number
  }

  export type ueUncheckedCreateWithoutSub_ue_listInput = {
    id?: number
    created_at?: Date | string
    name: string
    rank: number
  }

  export type ueCreateOrConnectWithoutSub_ue_listInput = {
    where: ueWhereUniqueInput
    create: XOR<ueCreateWithoutSub_ue_listInput, ueUncheckedCreateWithoutSub_ue_listInput>
  }

  export type topicCreateWithoutSub_ueInput = {
    created_at?: Date | string
    name: string
    rank: number
    course_content?: string
    cards?: cardCreateNestedManyWithoutTopicInput
    case_studies?: case_studyCreateNestedManyWithoutTopicInput
    quizes?: quizCreateNestedManyWithoutTopicInput
  }

  export type topicUncheckedCreateWithoutSub_ueInput = {
    id?: number
    created_at?: Date | string
    name: string
    rank: number
    course_content?: string
    cards?: cardUncheckedCreateNestedManyWithoutTopicInput
    case_studies?: case_studyUncheckedCreateNestedManyWithoutTopicInput
    quizes?: quizUncheckedCreateNestedManyWithoutTopicInput
  }

  export type topicCreateOrConnectWithoutSub_ueInput = {
    where: topicWhereUniqueInput
    create: XOR<topicCreateWithoutSub_ueInput, topicUncheckedCreateWithoutSub_ueInput>
  }

  export type topicCreateManySub_ueInputEnvelope = {
    data: Enumerable<topicCreateManySub_ueInput>
    skipDuplicates?: boolean
  }

  export type ueUpsertWithoutSub_ue_listInput = {
    update: XOR<ueUpdateWithoutSub_ue_listInput, ueUncheckedUpdateWithoutSub_ue_listInput>
    create: XOR<ueCreateWithoutSub_ue_listInput, ueUncheckedCreateWithoutSub_ue_listInput>
  }

  export type ueUpdateWithoutSub_ue_listInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
  }

  export type ueUncheckedUpdateWithoutSub_ue_listInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
  }

  export type topicUpsertWithWhereUniqueWithoutSub_ueInput = {
    where: topicWhereUniqueInput
    update: XOR<topicUpdateWithoutSub_ueInput, topicUncheckedUpdateWithoutSub_ueInput>
    create: XOR<topicCreateWithoutSub_ueInput, topicUncheckedCreateWithoutSub_ueInput>
  }

  export type topicUpdateWithWhereUniqueWithoutSub_ueInput = {
    where: topicWhereUniqueInput
    data: XOR<topicUpdateWithoutSub_ueInput, topicUncheckedUpdateWithoutSub_ueInput>
  }

  export type topicUpdateManyWithWhereWithoutSub_ueInput = {
    where: topicScalarWhereInput
    data: XOR<topicUpdateManyMutationInput, topicUncheckedUpdateManyWithoutTopicsInput>
  }

  export type topicScalarWhereInput = {
    AND?: Enumerable<topicScalarWhereInput>
    OR?: Enumerable<topicScalarWhereInput>
    NOT?: Enumerable<topicScalarWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    name?: StringFilter | string
    sub_ue_id?: IntFilter | number
    rank?: IntFilter | number
    course_content?: StringFilter | string
  }

  export type sub_ueCreateWithoutTopicsInput = {
    created_at?: Date | string
    name: string
    rank: number
    ue: ueCreateNestedOneWithoutSub_ue_listInput
  }

  export type sub_ueUncheckedCreateWithoutTopicsInput = {
    id?: number
    created_at?: Date | string
    name: string
    ue_id: number
    rank: number
  }

  export type sub_ueCreateOrConnectWithoutTopicsInput = {
    where: sub_ueWhereUniqueInput
    create: XOR<sub_ueCreateWithoutTopicsInput, sub_ueUncheckedCreateWithoutTopicsInput>
  }

  export type cardCreateWithoutTopicInput = {
    created_at?: Date | string
    rank: number
    title: string
    content: string
  }

  export type cardUncheckedCreateWithoutTopicInput = {
    id?: number
    created_at?: Date | string
    rank: number
    title: string
    content: string
  }

  export type cardCreateOrConnectWithoutTopicInput = {
    where: cardWhereUniqueInput
    create: XOR<cardCreateWithoutTopicInput, cardUncheckedCreateWithoutTopicInput>
  }

  export type cardCreateManyTopicInputEnvelope = {
    data: Enumerable<cardCreateManyTopicInput>
    skipDuplicates?: boolean
  }

  export type case_studyCreateWithoutTopicInput = {
    created_at?: Date | string
    rank: number
    title: string
    content: string
  }

  export type case_studyUncheckedCreateWithoutTopicInput = {
    id?: number
    created_at?: Date | string
    rank: number
    title: string
    content: string
  }

  export type case_studyCreateOrConnectWithoutTopicInput = {
    where: case_studyWhereUniqueInput
    create: XOR<case_studyCreateWithoutTopicInput, case_studyUncheckedCreateWithoutTopicInput>
  }

  export type case_studyCreateManyTopicInputEnvelope = {
    data: Enumerable<case_studyCreateManyTopicInput>
    skipDuplicates?: boolean
  }

  export type quizCreateWithoutTopicInput = {
    created_at?: Date | string
    rank: number
    title: string
    question: string
    quiz_choices?: quiz_choiceCreateNestedManyWithoutQuizInput
  }

  export type quizUncheckedCreateWithoutTopicInput = {
    id?: number
    created_at?: Date | string
    rank: number
    title: string
    question: string
    quiz_choices?: quiz_choiceUncheckedCreateNestedManyWithoutQuizInput
  }

  export type quizCreateOrConnectWithoutTopicInput = {
    where: quizWhereUniqueInput
    create: XOR<quizCreateWithoutTopicInput, quizUncheckedCreateWithoutTopicInput>
  }

  export type quizCreateManyTopicInputEnvelope = {
    data: Enumerable<quizCreateManyTopicInput>
    skipDuplicates?: boolean
  }

  export type sub_ueUpsertWithoutTopicsInput = {
    update: XOR<sub_ueUpdateWithoutTopicsInput, sub_ueUncheckedUpdateWithoutTopicsInput>
    create: XOR<sub_ueCreateWithoutTopicsInput, sub_ueUncheckedCreateWithoutTopicsInput>
  }

  export type sub_ueUpdateWithoutTopicsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    ue?: ueUpdateOneRequiredWithoutSub_ue_listNestedInput
  }

  export type sub_ueUncheckedUpdateWithoutTopicsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    ue_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
  }

  export type cardUpsertWithWhereUniqueWithoutTopicInput = {
    where: cardWhereUniqueInput
    update: XOR<cardUpdateWithoutTopicInput, cardUncheckedUpdateWithoutTopicInput>
    create: XOR<cardCreateWithoutTopicInput, cardUncheckedCreateWithoutTopicInput>
  }

  export type cardUpdateWithWhereUniqueWithoutTopicInput = {
    where: cardWhereUniqueInput
    data: XOR<cardUpdateWithoutTopicInput, cardUncheckedUpdateWithoutTopicInput>
  }

  export type cardUpdateManyWithWhereWithoutTopicInput = {
    where: cardScalarWhereInput
    data: XOR<cardUpdateManyMutationInput, cardUncheckedUpdateManyWithoutCardsInput>
  }

  export type cardScalarWhereInput = {
    AND?: Enumerable<cardScalarWhereInput>
    OR?: Enumerable<cardScalarWhereInput>
    NOT?: Enumerable<cardScalarWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    topic_id?: IntFilter | number
    rank?: IntFilter | number
    title?: StringFilter | string
    content?: StringFilter | string
  }

  export type case_studyUpsertWithWhereUniqueWithoutTopicInput = {
    where: case_studyWhereUniqueInput
    update: XOR<case_studyUpdateWithoutTopicInput, case_studyUncheckedUpdateWithoutTopicInput>
    create: XOR<case_studyCreateWithoutTopicInput, case_studyUncheckedCreateWithoutTopicInput>
  }

  export type case_studyUpdateWithWhereUniqueWithoutTopicInput = {
    where: case_studyWhereUniqueInput
    data: XOR<case_studyUpdateWithoutTopicInput, case_studyUncheckedUpdateWithoutTopicInput>
  }

  export type case_studyUpdateManyWithWhereWithoutTopicInput = {
    where: case_studyScalarWhereInput
    data: XOR<case_studyUpdateManyMutationInput, case_studyUncheckedUpdateManyWithoutCase_studiesInput>
  }

  export type case_studyScalarWhereInput = {
    AND?: Enumerable<case_studyScalarWhereInput>
    OR?: Enumerable<case_studyScalarWhereInput>
    NOT?: Enumerable<case_studyScalarWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    topic_id?: IntFilter | number
    rank?: IntFilter | number
    title?: StringFilter | string
    content?: StringFilter | string
  }

  export type quizUpsertWithWhereUniqueWithoutTopicInput = {
    where: quizWhereUniqueInput
    update: XOR<quizUpdateWithoutTopicInput, quizUncheckedUpdateWithoutTopicInput>
    create: XOR<quizCreateWithoutTopicInput, quizUncheckedCreateWithoutTopicInput>
  }

  export type quizUpdateWithWhereUniqueWithoutTopicInput = {
    where: quizWhereUniqueInput
    data: XOR<quizUpdateWithoutTopicInput, quizUncheckedUpdateWithoutTopicInput>
  }

  export type quizUpdateManyWithWhereWithoutTopicInput = {
    where: quizScalarWhereInput
    data: XOR<quizUpdateManyMutationInput, quizUncheckedUpdateManyWithoutQuizesInput>
  }

  export type quizScalarWhereInput = {
    AND?: Enumerable<quizScalarWhereInput>
    OR?: Enumerable<quizScalarWhereInput>
    NOT?: Enumerable<quizScalarWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    topic_id?: IntFilter | number
    rank?: IntFilter | number
    title?: StringFilter | string
    question?: StringFilter | string
  }

  export type topicCreateWithoutCardsInput = {
    created_at?: Date | string
    name: string
    rank: number
    course_content?: string
    sub_ue: sub_ueCreateNestedOneWithoutTopicsInput
    case_studies?: case_studyCreateNestedManyWithoutTopicInput
    quizes?: quizCreateNestedManyWithoutTopicInput
  }

  export type topicUncheckedCreateWithoutCardsInput = {
    id?: number
    created_at?: Date | string
    name: string
    sub_ue_id: number
    rank: number
    course_content?: string
    case_studies?: case_studyUncheckedCreateNestedManyWithoutTopicInput
    quizes?: quizUncheckedCreateNestedManyWithoutTopicInput
  }

  export type topicCreateOrConnectWithoutCardsInput = {
    where: topicWhereUniqueInput
    create: XOR<topicCreateWithoutCardsInput, topicUncheckedCreateWithoutCardsInput>
  }

  export type topicUpsertWithoutCardsInput = {
    update: XOR<topicUpdateWithoutCardsInput, topicUncheckedUpdateWithoutCardsInput>
    create: XOR<topicCreateWithoutCardsInput, topicUncheckedCreateWithoutCardsInput>
  }

  export type topicUpdateWithoutCardsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    course_content?: StringFieldUpdateOperationsInput | string
    sub_ue?: sub_ueUpdateOneRequiredWithoutTopicsNestedInput
    case_studies?: case_studyUpdateManyWithoutTopicNestedInput
    quizes?: quizUpdateManyWithoutTopicNestedInput
  }

  export type topicUncheckedUpdateWithoutCardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    sub_ue_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    course_content?: StringFieldUpdateOperationsInput | string
    case_studies?: case_studyUncheckedUpdateManyWithoutTopicNestedInput
    quizes?: quizUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type topicCreateWithoutCase_studiesInput = {
    created_at?: Date | string
    name: string
    rank: number
    course_content?: string
    sub_ue: sub_ueCreateNestedOneWithoutTopicsInput
    cards?: cardCreateNestedManyWithoutTopicInput
    quizes?: quizCreateNestedManyWithoutTopicInput
  }

  export type topicUncheckedCreateWithoutCase_studiesInput = {
    id?: number
    created_at?: Date | string
    name: string
    sub_ue_id: number
    rank: number
    course_content?: string
    cards?: cardUncheckedCreateNestedManyWithoutTopicInput
    quizes?: quizUncheckedCreateNestedManyWithoutTopicInput
  }

  export type topicCreateOrConnectWithoutCase_studiesInput = {
    where: topicWhereUniqueInput
    create: XOR<topicCreateWithoutCase_studiesInput, topicUncheckedCreateWithoutCase_studiesInput>
  }

  export type topicUpsertWithoutCase_studiesInput = {
    update: XOR<topicUpdateWithoutCase_studiesInput, topicUncheckedUpdateWithoutCase_studiesInput>
    create: XOR<topicCreateWithoutCase_studiesInput, topicUncheckedCreateWithoutCase_studiesInput>
  }

  export type topicUpdateWithoutCase_studiesInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    course_content?: StringFieldUpdateOperationsInput | string
    sub_ue?: sub_ueUpdateOneRequiredWithoutTopicsNestedInput
    cards?: cardUpdateManyWithoutTopicNestedInput
    quizes?: quizUpdateManyWithoutTopicNestedInput
  }

  export type topicUncheckedUpdateWithoutCase_studiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    sub_ue_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    course_content?: StringFieldUpdateOperationsInput | string
    cards?: cardUncheckedUpdateManyWithoutTopicNestedInput
    quizes?: quizUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type topicCreateWithoutQuizesInput = {
    created_at?: Date | string
    name: string
    rank: number
    course_content?: string
    sub_ue: sub_ueCreateNestedOneWithoutTopicsInput
    cards?: cardCreateNestedManyWithoutTopicInput
    case_studies?: case_studyCreateNestedManyWithoutTopicInput
  }

  export type topicUncheckedCreateWithoutQuizesInput = {
    id?: number
    created_at?: Date | string
    name: string
    sub_ue_id: number
    rank: number
    course_content?: string
    cards?: cardUncheckedCreateNestedManyWithoutTopicInput
    case_studies?: case_studyUncheckedCreateNestedManyWithoutTopicInput
  }

  export type topicCreateOrConnectWithoutQuizesInput = {
    where: topicWhereUniqueInput
    create: XOR<topicCreateWithoutQuizesInput, topicUncheckedCreateWithoutQuizesInput>
  }

  export type quiz_choiceCreateWithoutQuizInput = {
    created_at?: Date | string
    rank: number
    text: string
    answer: boolean
    comment: string
    positive_points: number
    negative_points: number
  }

  export type quiz_choiceUncheckedCreateWithoutQuizInput = {
    id?: number
    created_at?: Date | string
    rank: number
    text: string
    answer: boolean
    comment: string
    positive_points: number
    negative_points: number
  }

  export type quiz_choiceCreateOrConnectWithoutQuizInput = {
    where: quiz_choiceWhereUniqueInput
    create: XOR<quiz_choiceCreateWithoutQuizInput, quiz_choiceUncheckedCreateWithoutQuizInput>
  }

  export type quiz_choiceCreateManyQuizInputEnvelope = {
    data: Enumerable<quiz_choiceCreateManyQuizInput>
    skipDuplicates?: boolean
  }

  export type topicUpsertWithoutQuizesInput = {
    update: XOR<topicUpdateWithoutQuizesInput, topicUncheckedUpdateWithoutQuizesInput>
    create: XOR<topicCreateWithoutQuizesInput, topicUncheckedCreateWithoutQuizesInput>
  }

  export type topicUpdateWithoutQuizesInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    course_content?: StringFieldUpdateOperationsInput | string
    sub_ue?: sub_ueUpdateOneRequiredWithoutTopicsNestedInput
    cards?: cardUpdateManyWithoutTopicNestedInput
    case_studies?: case_studyUpdateManyWithoutTopicNestedInput
  }

  export type topicUncheckedUpdateWithoutQuizesInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    sub_ue_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    course_content?: StringFieldUpdateOperationsInput | string
    cards?: cardUncheckedUpdateManyWithoutTopicNestedInput
    case_studies?: case_studyUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type quiz_choiceUpsertWithWhereUniqueWithoutQuizInput = {
    where: quiz_choiceWhereUniqueInput
    update: XOR<quiz_choiceUpdateWithoutQuizInput, quiz_choiceUncheckedUpdateWithoutQuizInput>
    create: XOR<quiz_choiceCreateWithoutQuizInput, quiz_choiceUncheckedCreateWithoutQuizInput>
  }

  export type quiz_choiceUpdateWithWhereUniqueWithoutQuizInput = {
    where: quiz_choiceWhereUniqueInput
    data: XOR<quiz_choiceUpdateWithoutQuizInput, quiz_choiceUncheckedUpdateWithoutQuizInput>
  }

  export type quiz_choiceUpdateManyWithWhereWithoutQuizInput = {
    where: quiz_choiceScalarWhereInput
    data: XOR<quiz_choiceUpdateManyMutationInput, quiz_choiceUncheckedUpdateManyWithoutQuiz_choicesInput>
  }

  export type quiz_choiceScalarWhereInput = {
    AND?: Enumerable<quiz_choiceScalarWhereInput>
    OR?: Enumerable<quiz_choiceScalarWhereInput>
    NOT?: Enumerable<quiz_choiceScalarWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    quiz_id?: IntFilter | number
    rank?: IntFilter | number
    text?: StringFilter | string
    answer?: BoolFilter | boolean
    comment?: StringFilter | string
    positive_points?: IntFilter | number
    negative_points?: IntFilter | number
  }

  export type quizCreateWithoutQuiz_choicesInput = {
    created_at?: Date | string
    rank: number
    title: string
    question: string
    topic: topicCreateNestedOneWithoutQuizesInput
  }

  export type quizUncheckedCreateWithoutQuiz_choicesInput = {
    id?: number
    created_at?: Date | string
    topic_id: number
    rank: number
    title: string
    question: string
  }

  export type quizCreateOrConnectWithoutQuiz_choicesInput = {
    where: quizWhereUniqueInput
    create: XOR<quizCreateWithoutQuiz_choicesInput, quizUncheckedCreateWithoutQuiz_choicesInput>
  }

  export type quizUpsertWithoutQuiz_choicesInput = {
    update: XOR<quizUpdateWithoutQuiz_choicesInput, quizUncheckedUpdateWithoutQuiz_choicesInput>
    create: XOR<quizCreateWithoutQuiz_choicesInput, quizUncheckedCreateWithoutQuiz_choicesInput>
  }

  export type quizUpdateWithoutQuiz_choicesInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    topic?: topicUpdateOneRequiredWithoutQuizesNestedInput
  }

  export type quizUncheckedUpdateWithoutQuiz_choicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    topic_id?: IntFieldUpdateOperationsInput | number
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
  }

  export type user_actionCreateManyUserInput = {
    id?: number
    time?: Date | string
    action: string
  }

  export type user_actionUpdateWithoutUserInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
  }

  export type user_actionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
  }

  export type user_actionUncheckedUpdateManyWithoutUser_actionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
  }

  export type sub_ueCreateManyUeInput = {
    id?: number
    created_at?: Date | string
    name: string
    rank: number
  }

  export type sub_ueUpdateWithoutUeInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    topics?: topicUpdateManyWithoutSub_ueNestedInput
  }

  export type sub_ueUncheckedUpdateWithoutUeInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    topics?: topicUncheckedUpdateManyWithoutSub_ueNestedInput
  }

  export type sub_ueUncheckedUpdateManyWithoutSub_ue_listInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
  }

  export type topicCreateManySub_ueInput = {
    id?: number
    created_at?: Date | string
    name: string
    rank: number
    course_content?: string
  }

  export type topicUpdateWithoutSub_ueInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    course_content?: StringFieldUpdateOperationsInput | string
    cards?: cardUpdateManyWithoutTopicNestedInput
    case_studies?: case_studyUpdateManyWithoutTopicNestedInput
    quizes?: quizUpdateManyWithoutTopicNestedInput
  }

  export type topicUncheckedUpdateWithoutSub_ueInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    course_content?: StringFieldUpdateOperationsInput | string
    cards?: cardUncheckedUpdateManyWithoutTopicNestedInput
    case_studies?: case_studyUncheckedUpdateManyWithoutTopicNestedInput
    quizes?: quizUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type topicUncheckedUpdateManyWithoutTopicsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    rank?: IntFieldUpdateOperationsInput | number
    course_content?: StringFieldUpdateOperationsInput | string
  }

  export type cardCreateManyTopicInput = {
    id?: number
    created_at?: Date | string
    rank: number
    title: string
    content: string
  }

  export type case_studyCreateManyTopicInput = {
    id?: number
    created_at?: Date | string
    rank: number
    title: string
    content: string
  }

  export type quizCreateManyTopicInput = {
    id?: number
    created_at?: Date | string
    rank: number
    title: string
    question: string
  }

  export type cardUpdateWithoutTopicInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type cardUncheckedUpdateWithoutTopicInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type cardUncheckedUpdateManyWithoutCardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type case_studyUpdateWithoutTopicInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type case_studyUncheckedUpdateWithoutTopicInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type case_studyUncheckedUpdateManyWithoutCase_studiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type quizUpdateWithoutTopicInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    quiz_choices?: quiz_choiceUpdateManyWithoutQuizNestedInput
  }

  export type quizUncheckedUpdateWithoutTopicInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    quiz_choices?: quiz_choiceUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type quizUncheckedUpdateManyWithoutQuizesInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
  }

  export type quiz_choiceCreateManyQuizInput = {
    id?: number
    created_at?: Date | string
    rank: number
    text: string
    answer: boolean
    comment: string
    positive_points: number
    negative_points: number
  }

  export type quiz_choiceUpdateWithoutQuizInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    answer?: BoolFieldUpdateOperationsInput | boolean
    comment?: StringFieldUpdateOperationsInput | string
    positive_points?: IntFieldUpdateOperationsInput | number
    negative_points?: IntFieldUpdateOperationsInput | number
  }

  export type quiz_choiceUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    answer?: BoolFieldUpdateOperationsInput | boolean
    comment?: StringFieldUpdateOperationsInput | string
    positive_points?: IntFieldUpdateOperationsInput | number
    negative_points?: IntFieldUpdateOperationsInput | number
  }

  export type quiz_choiceUncheckedUpdateManyWithoutQuiz_choicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rank?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    answer?: BoolFieldUpdateOperationsInput | boolean
    comment?: StringFieldUpdateOperationsInput | string
    positive_points?: IntFieldUpdateOperationsInput | number
    negative_points?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}