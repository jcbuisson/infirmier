
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.1
 * Query Engine version: b20ead4d3ab9e78ac112966e242ded703f4a052c
 */
Prisma.prismaVersion = {
  client: "4.16.1",
  engine: "b20ead4d3ab9e78ac112966e242ded703f4a052c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime'
};

exports.Prisma.User_actionScalarFieldEnum = {
  id: 'id',
  session_id: 'session_id',
  time: 'time',
  user_id: 'user_id',
  action: 'action'
};

exports.Prisma.CenterScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  type: 'type',
  name: 'name'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  from_id: 'from_id',
  to_id: 'to_id',
  read_on: 'read_on',
  content: 'content'
};

exports.Prisma.Patient_caregiverScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  confirmed: 'confirmed',
  patient_id: 'patient_id',
  caregiver_id: 'caregiver_id',
  role: 'role'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  sub: 'sub',
  password: 'password',
  type: 'type',
  birthdate: 'birthdate',
  title: 'title',
  email: 'email',
  phone: 'phone',
  firstname: 'firstname',
  lastname: 'lastname',
  alias: 'alias',
  notes: 'notes',
  avatarUrl: 'avatarUrl',
  install_token: 'install_token',
  subscription: 'subscription',
  gender: 'gender',
  height_cm: 'height_cm',
  weight: 'weight',
  actsport: 'actsport',
  actprof: 'actprof',
  diabetes_type: 'diabetes_type',
  hypertriglyceridemia: 'hypertriglyceridemia',
  hypercholesterolemia: 'hypercholesterolemia',
  salt_diet: 'salt_diet',
  energy_goal: 'energy_goal'
};

exports.Prisma.User_centerScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  user_id: 'user_id',
  center_id: 'center_id',
  role: 'role'
};

exports.Prisma.User_goalScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  user_id: 'user_id',
  date: 'date',
  type: 'type',
  value: 'value'
};

exports.Prisma.User_measurementScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  user_id: 'user_id',
  date: 'date',
  type: 'type',
  value: 'value'
};

exports.Prisma.User_withingsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  user_id: 'user_id',
  withings_userid: 'withings_userid',
  access_token: 'access_token',
  refresh_token: 'refresh_token'
};

exports.Prisma.User_patientScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  user_id: 'user_id',
  protocol_code: 'protocol_code',
  protocol_inclusion_date: 'protocol_inclusion_date'
};

exports.Prisma.FractioningScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  user_id: 'user_id',
  date: 'date',
  meal_types: 'meal_types'
};

exports.Prisma.Meal_elementScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  meal_id: 'meal_id',
  food_id: 'food_id',
  weight: 'weight',
  portion_id: 'portion_id',
  portion_cnt: 'portion_cnt'
};

exports.Prisma.MealScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  user_id: 'user_id',
  date: 'date',
  mealtype: 'mealtype',
  really_eaten: 'really_eaten'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  user_id: 'user_id',
  mealtype: 'mealtype',
  count: 'count',
  food_id: 'food_id',
  weight: 'weight',
  portion_id: 'portion_id',
  portion_cnt: 'portion_cnt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  shrt_desc: 'shrt_desc',
  long_desc: 'long_desc',
  ciqual_gpcd: 'ciqual_gpcd',
  member_of_id: 'member_of_id',
  rank: 'rank',
  tag: 'tag'
};

exports.Prisma.Food_categoryScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  food_id: 'food_id',
  category_id: 'category_id'
};

exports.Prisma.Food_portionScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  qty: 'qty',
  shrt_desc: 'shrt_desc',
  long_desc: 'long_desc',
  note: 'note',
  pict: 'pict',
  food_id: 'food_id'
};

exports.Prisma.FoodScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  shrt_desc: 'shrt_desc',
  long_desc: 'long_desc',
  ciqual_name: 'ciqual_name',
  ctdit_shrt_desc: 'ctdit_shrt_desc',
  ctdit_long_desc: 'ctdit_long_desc',
  keywords: 'keywords',
  ciqual_num: 'ciqual_num',
  note: 'note',
  max_qty: 'max_qty',
  pict: 'pict',
  source_id: 'source_id',
  is_brand: 'is_brand',
  is_raw: 'is_raw',
  is_indivisible: 'is_indivisible',
  is_chu: 'is_chu',
  is_demo: 'is_demo',
  is_patient_full: 'is_patient_full',
  is_patient_simplified: 'is_patient_simplified',
  pack_pict: 'pack_pict',
  is_validated: 'is_validated'
};

exports.Prisma.NutdataScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  val: 'val',
  note: 'note',
  food_id: 'food_id',
  nutr_no: 'nutr_no',
  source_id: 'source_id'
};

exports.Prisma.NutrientScalarFieldEnum = {
  nutr_no: 'nutr_no',
  created_at: 'created_at',
  ifda_no: 'ifda_no',
  unit: 'unit',
  shrt_desc: 'shrt_desc',
  long_desc: 'long_desc',
  energy_density: 'energy_density'
};

exports.Prisma.SourceScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  shrt_desc: 'shrt_desc',
  long_desc: 'long_desc'
};

exports.Prisma.DishScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  shrt_desc: 'shrt_desc',
  long_desc: 'long_desc',
  pict: 'pict',
  note: 'note',
  shrt_source: 'shrt_source',
  long_source: 'long_source',
  qty_max: 'qty_max',
  resume: 'resume',
  recette: 'recette',
  nbpersonnes: 'nbpersonnes',
  qte: 'qte',
  diabete: 'diabete',
  cardiaque: 'cardiaque',
  obese: 'obese',
  ssel: 'ssel',
  chol: 'chol',
  trigly: 'trigly',
  maxqty: 'maxqty'
};

exports.Prisma.LexiconScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  code: 'code',
  title: 'title',
  text: 'text'
};

exports.Prisma.Qcu_imageScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  pict: 'pict',
  question_id: 'question_id'
};

exports.Prisma.Qcu_questionScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  note: 'note',
  type: 'type',
  level: 'level',
  question: 'question',
  diabete: 'diabete',
  sssel: 'sssel',
  chol: 'chol',
  trigly: 'trigly'
};

exports.Prisma.Qcu_itemScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  proposition: 'proposition',
  pict: 'pict',
  answer: 'answer',
  success: 'success',
  question_id: 'question_id'
};

exports.Prisma.User_qcuanswerScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  user_id: 'user_id',
  qcuquestion_id: 'qcuquestion_id',
  success: 'success'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.CenterType = {
  institution: 'institution',
  family: 'family'
};

exports.PatientCaregiverType = {
  referent: 'referent',
  coach: 'coach',
  diet: 'diet',
  familydoctor: 'familydoctor',
  other: 'other'
};

exports.UserType = {
  admin: 'admin',
  patient: 'patient',
  caregiver: 'caregiver',
  coordinator: 'coordinator'
};

exports.CenterRole = {
  patient: 'patient',
  caregiver: 'caregiver',
  coordinator: 'coordinator'
};

exports.GoalType = {
  weight: 'weight',
  steps: 'steps'
};

exports.MeasurementType = {
  weight: 'weight',
  fat: 'fat',
  steps: 'steps',
  elevation: 'elevation',
  soft: 'soft',
  moderate: 'moderate',
  intense: 'intense'
};

exports.Prisma.ModelName = {
  session: 'session',
  user_action: 'user_action',
  center: 'center',
  message: 'message',
  patient_caregiver: 'patient_caregiver',
  user: 'user',
  user_center: 'user_center',
  user_goal: 'user_goal',
  user_measurement: 'user_measurement',
  user_withings: 'user_withings',
  user_patient: 'user_patient',
  fractioning: 'fractioning',
  meal_element: 'meal_element',
  meal: 'meal',
  favorite: 'favorite',
  category: 'category',
  food_category: 'food_category',
  food_portion: 'food_portion',
  food: 'food',
  nutdata: 'nutdata',
  nutrient: 'nutrient',
  source: 'source',
  dish: 'dish',
  lexicon: 'lexicon',
  qcu_image: 'qcu_image',
  qcu_question: 'qcu_question',
  qcu_item: 'qcu_item',
  user_qcuanswer: 'user_qcuanswer'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
