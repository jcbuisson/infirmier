generator client {
  provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}


model session {
   id              Int       @default(autoincrement()) @id
   startTime       DateTime
   endTime         DateTime?

   user_actions    user_action[]
}

model user_action {
   id              Int       @default(autoincrement()) @id
   session_id      Int
   time            DateTime
   user_id         Int
   action          String

   session         session   @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   user            user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}



model center {
   id             Int           @id @default(autoincrement())
   created_at     DateTime?     @default(now()) @db.Timestamptz(6)
   type           CenterType
   name           String
   user_centers   user_center[]
}

enum CenterType {
   institution
   family
}

model message {
   id           Int           @id @default(autoincrement())
   created_at   DateTime?     @default(now()) @db.Timestamptz(6)
   from_id      Int
   from         user          @relation(name: "from", fields: [from_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_from_id_foreign")
   to_id        Int
   to           user          @relation(name: "to", fields: [to_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_to_id_foreign")
   read_on      DateTime?
   content      String
}

model patient_caregiver {
   id            Int           @id @default(autoincrement())
   created_at    DateTime?     @default(now()) @db.Timestamptz(6)
   confirmed     Boolean       @default(true)
   patient_id    Int
   patient       user          @relation(name: "patient", fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "patient_caregiver_patient_id_foreign")
   caregiver_id  Int
   caregiver     user          @relation(name: "caregiver", fields: [caregiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "patient_caregiver_caregiver_id_foreign")
   role          PatientCaregiverType
}

enum PatientCaregiverType {
   referent
   coach
   diet
   familydoctor
   other
}


model user {
   id                   Int                   @id @default(autoincrement())
   created_at           DateTime?             @default(now()) @db.Timestamptz(6)
   sub                  String?               @unique(map: "users_sub_unique")
   password             String?               // 4-digit pin-code for patients
   type                 UserType
   birthdate            DateTime?             @db.Date

   title                String?               // ex: "diététicienne", "ARC", "kiné"
   email                String?
   phone                String?
   firstname            String?
   lastname             String?
   alias                String?
   notes                String?
   avatarUrl            String?
   install_token        String?
   subscription         String?

   gender               Int?                  // 0: female, 1: male
   height_cm            Int?
   weight               Decimal?
   actsport             Int?
   actprof              Int?
   diabetes_type        Int?
   hypertriglyceridemia Boolean?
   hypercholesterolemia Boolean?
   salt_diet            Int?
   energy_goal          Int?

   user_actions         user_action[]
   favorites            favorite[]
   fractionings         fractioning[]
   meals                meal[]
   messages_from        message[]              @relation("from")
   messages_to          message[]              @relation("to")
   patients             patient_caregiver[]    @relation("patient")
   caregivers           patient_caregiver[]    @relation("caregiver")
   user_centers         user_center[]
   user_goals           user_goal[]
   user_measurements    user_measurement[]
   user_withings        user_withings[]
   user_patients        user_patient[]
   user_qcuanswers      user_qcuanswer[]
}

enum UserType {
   admin
   patient
   caregiver
   coordinator
}

model user_center {
   id           Int       @id @default(autoincrement())
   created_at   DateTime? @default(now()) @db.Timestamptz(6)
   user_id      Int
   center_id    Int
   role         CenterRole
   user         user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_center_user_id_foreign")
   center       center    @relation(fields: [center_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_center_center_id_foreign")
}

enum CenterRole {
   patient
   caregiver
   coordinator
}

model user_goal {
   id           Int       @id @default(autoincrement())
   created_at   DateTime? @default(now()) @db.Timestamptz(6)
   user_id      Int
   date         DateTime
   type         GoalType
   value        String
   user         user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_goal_user_id_foreign")
}

enum GoalType {
   weight
   steps
}

model user_measurement {
   id           Int       @id @default(autoincrement())
   created_at   DateTime? @default(now()) @db.Timestamptz(6)
   user_id      Int
   date         DateTime
   type         MeasurementType
   value        Decimal?  @db.Decimal(8, 2) // weight: kg (ex: 69.563), fat: % (ex: 15.123), steps: step count, elevation: floor count, soft..intense: mn

   user         user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_measurement_user_id_foreign")
   @@unique([user_id, date, type])
}

enum MeasurementType {
   weight
   fat
   steps
   elevation
   soft
   moderate
   intense
}

model user_withings {
   id               Int        @id @default(autoincrement())
   created_at       DateTime?  @default(now()) @db.Timestamptz(6)
   user_id          Int
   withings_userid  String
   access_token     String
   refresh_token    String

   user             user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_withings_user_id_foreign")
   @@unique([user_id, withings_userid])
}

model user_patient {
   id                       Int        @id @default(autoincrement())
   created_at               DateTime?  @default(now()) @db.Timestamptz(6)
   user_id                  Int
   protocol_code            String?
   protocol_inclusion_date  String?

   user                     user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_patients_user_id_foreign")
   @@unique([user_id, protocol_code])
}



model fractioning {
   id         Int       @id @default(autoincrement())
   created_at DateTime? @default(now()) @db.Timestamptz(6)
   user_id    Int
   date       String?   @db.VarChar(255)
   meal_types String?   @default("[]")
   
   user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fractionings_user_id_foreign")
   @@unique([user_id, date])
}

model meal_element {
   id            Int            @id @default(autoincrement())
   created_at    DateTime?      @default(now()) @db.Timestamptz(6)
   meal_id       Int
   food_id       Int?
   weight        String?
   portion_id    Int?
   portion_cnt   Decimal?       @db.Decimal(8, 2)
   food          food?          @relation(fields: [food_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "meal_elements_food_id_foreign")
   meal          meal           @relation(fields: [meal_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "meal_elements_meal_id_foreign")
   foodPortion   food_portion?   @relation(fields: [portion_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "meal_elements_portion_id_foreign")
}

model meal {
   id            Int             @id @default(autoincrement())
   created_at    DateTime?       @default(now()) @db.Timestamptz(6)
   user_id       Int
   date          String?
   mealtype      String?
   really_eaten  Boolean?

   meal_elements meal_element[]
   users         user            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "meals_user_id_foreign")

   @@unique([user_id, date, mealtype])
}

model favorite {
   id            Int            @id @default(autoincrement())
   created_at    DateTime?      @default(now()) @db.Timestamptz(6)
   user_id       Int
   mealtype      String?
   count         Int?           @default(1)
   food_id       Int?
   weight        String?
   portion_id    Int?
   portion_cnt   Decimal?       @db.Decimal(8, 2)

   food          food?          @relation(fields: [food_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favorites_food_id_foreign")
   foodPortion   food_portion?   @relation(fields: [portion_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favorites_portion_id_foreign")
   user          user           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favorites_user_id_foreign")
   
   @@unique([user_id, food_id, mealtype])
}



model category {
   id              Int               @id @default(autoincrement())
   created_at      DateTime?         @default(now()) @db.Timestamptz(6)
   shrt_desc       String
   long_desc       String?
   ciqual_gpcd     String?
   member_of_id    Int?
   rank            Int?
   tag             String?           @unique(map: "categories_tag_unique") @db.VarChar(255)
   food_categories food_category[]
}

model food_category {
   id          Int        @id @default(autoincrement())
   created_at  DateTime?  @default(now()) @db.Timestamptz(6)
   food_id     Int
   category_id Int
   categoriy   category   @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "food_categories_category_id_foreign")
   food        food       @relation(fields: [food_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "food_categories_food_id_foreign")
}

model food_portion {
   id            Int             @id @default(autoincrement())
   created_at    DateTime?       @default(now()) @db.Timestamptz(6)
   qty           String
   shrt_desc     String
   long_desc     String?
   note          String?
   pict          String?
   food_id       Int
   food          food            @relation(fields: [food_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "food_portions_food_id_foreign")
   mealElements  meal_element[]
   favorites     favorite[]
}

model food {
   id                    Int               @id @default(autoincrement())
   created_at            DateTime?         @default(now()) @db.Timestamptz(6)
   shrt_desc             String
   long_desc             String?
   ciqual_name           String?
   ctdit_shrt_desc       String?
   ctdit_long_desc       String?
   keywords              String?           @default("")
   ciqual_num            String?
   note                  String?           @default("")
   max_qty               String?           @default("100.")
   pict                  String?
   source_id             Int
   is_brand              Boolean?          @default(false)
   is_raw                Boolean?          @default(false)
   is_indivisible        Boolean?          @default(false)
   is_chu                Boolean?          @default(false)
   is_demo               Boolean?          @default(false)
   is_patient_full       Boolean?          @default(false)
   is_patient_simplified Boolean?          @default(false)
   pack_pict             String?
   is_validated          Boolean?          @default(false)
   food_categories       food_category[]
   food_portions         food_portion[]
   source                source            @relation(fields: [source_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "foods_source_id_foreign")
   nutdata               nutdata[]
   mealElements          meal_element[]
   favorites             favorite[]
}

model nutdata {
   id         Int       @id @default(autoincrement())
   created_at DateTime? @default(now()) @db.Timestamptz(6)
   val        String?
   note       String?
   food_id    Int
   nutr_no    String
   source_id  Int
   food       food      @relation(fields: [food_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "nutdata_food_id_foreign")
   nutrient   nutrient  @relation(fields: [nutr_no], references: [nutr_no], onDelete: Cascade, onUpdate: NoAction, map: "nutdata_nutr_no_foreign")
   source     source    @relation(fields: [source_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "nutdata_source_id_foreign")
}

model nutrient {
   nutr_no        String  @unique
   created_at     DateTime? @default(now()) @db.Timestamptz(6)
   ifda_no        String?
   unit           String?
   shrt_desc      String?
   long_desc      String?
   energy_density Decimal?  @db.Decimal(8, 2)
   nutdata        nutdata[]
}

model source {
   id         Int       @id @default(autoincrement())
   created_at DateTime? @default(now()) @db.Timestamptz(6)
   shrt_desc  String
   long_desc  String?
   foods      food[]
   nutdata    nutdata[]
}

model dish {
   id           Int       @id @default(autoincrement())
   created_at   DateTime? @default(now()) @db.Timestamptz(6)
   shrt_desc    String
   long_desc    String?
   pict         String?
   note         String?
   shrt_source  String
   long_source  String?
   qty_max      String?
   resume       String?
   recette      String?
   nbpersonnes  Int
   qte          String
   diabete      String    @default("012")
   cardiaque    String    @default("01")
   obese        String    @default("01")
   ssel         String    @default("02468")
   chol         String    @default("01")
   trigly       String    @default("01")
   maxqty       Float
}


model lexicon {
   id           Int           @id @default(autoincrement())
   created_at   DateTime?     @default(now()) @db.Timestamptz(6)
   code         String        @unique
   title        String
   text         String
}

model qcu_image {
   id           Int            @id @default(autoincrement())
   created_at   DateTime?      @default(now()) @db.Timestamptz(6)
   pict         String
   question_id  Int
   question     qcu_question    @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "qcuimage_question_id_foreign")
}

model qcu_question {
   id           Int           @id @default(autoincrement())
   created_at   DateTime?     @default(now()) @db.Timestamptz(6)
   note         String
   type         String
   level        String
   question     String
   diabete      String
   sssel        String
   chol         String
   trigly       String
   items        qcu_item[]
   images       qcu_image[]
   answers      user_qcuanswer[]
}

model qcu_item {
   id           Int           @id @default(autoincrement())
   created_at   DateTime?     @default(now()) @db.Timestamptz(6)
   proposition  String
   pict         String
   answer       String
   success      Boolean
   question_id  Int
   question     qcu_question   @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "qcuitem_question_id_foreign")
}

model user_qcuanswer {
   id              Int           @id @default(autoincrement())
   timestamp       DateTime?     @default(now()) @db.Timestamptz(6)
   user_id         Int
   qcuquestion_id  Int
   success         Boolean
   user            user           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "userqcuanswer_user_id_foreign")
   question        qcu_question    @relation(fields: [qcuquestion_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "userqcuanswer_question_id_foreign")
}
