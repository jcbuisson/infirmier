generator client {
  provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}


model user {
   id                    Int               @id @default(autoincrement())
   created_at            DateTime          @default(now()) @db.Timestamptz(6)
   email                 String?           @unique(map: "user_sub_unique")
   password              String?           // 4-digit pin-code for patients
   type                  UserType          @default(student)
   accept_cgu            Boolean?
   admin                 Boolean           @default(false)

   google_id             String?           @unique(map: "uses_google_id_unique")
   name                  String?
   picture               String?

   user_actions          user_action[]
   user_topics           user_topic[]      // actually a 1:1 relationship
   user_text_annotations user_text_annotation[]
   user_cards            user_card[]       // actually a 1:1 relationship
   user_quizes           user_quiz[]       // actually a 1:1 relationship
   user_case_studies     user_case_study[] // actually a 1:1 relationship
}

enum UserType {
   admin
   student
}

// UE
model ue {
   id                    Int               @id @default(autoincrement())
   created_at            DateTime          @default(now()) @db.Timestamptz(6)
   name                  String
   rank                  Int

   sub_ue_list           sub_ue[]
}

// Sous UE
model sub_ue {
   id                    Int               @id @default(autoincrement())
   created_at            DateTime          @default(now()) @db.Timestamptz(6)
   name                  String
   ue_id                 Int
   rank                  Int

   ue                    ue                @relation(fields: [ue_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   topics                topic[]
}

// Matière au sein d'une sous-UE
model topic {
   id                    Int               @id @default(autoincrement())
   created_at            DateTime          @default(now()) @db.Timestamptz(6)
   name                  String
   sub_ue_id             Int
   rank                  Int
   course_content        String            @default("")

   sub_ue                sub_ue            @relation(fields: [sub_ue_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   cards                 card[]
   case_studies          case_study[]
   quizes                quiz[]
   user_text_annotations user_text_annotation[]
   user_topics           user_topic[]      // actually a 1:1 relationship
}

// Fiche de révision au sein d'une matière
model card {
   id                    Int               @id @default(autoincrement())
   created_at            DateTime          @default(now()) @db.Timestamptz(6)
   topic_id              Int
   rank                  Int
   title                 String
   content               String            // contenu du cours

   topic                 topic             @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   user_cards            user_card[]       // actually a 1:1 relationship
}

// Étude de cas au sein d'une matière
model case_study {
   id                    Int               @id @default(autoincrement())
   created_at            DateTime          @default(now()) @db.Timestamptz(6)
   topic_id              Int
   rank                  Int
   title                 String
   content               String

   topic                 topic             @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   user_case_studies     user_case_study[]
}

// QCM au sein d'une matière
model quiz {
   id                    Int               @id @default(autoincrement())
   created_at            DateTime          @default(now()) @db.Timestamptz(6)
   topic_id              Int
   rank                  Int
   title                 String
   question              String

   topic                 topic             @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   quiz_choices          quiz_choice[]
   user_quizes           user_quiz[]
}

// Choix de QCM
model quiz_choice {
   id                    Int               @id @default(autoincrement())
   created_at            DateTime          @default(now()) @db.Timestamptz(6)
   quiz_id               Int
   rank                  Int
   text                  String
   answer                Boolean
   comment               String
   positive_points       Int
   negative_points       Int

   quiz                  quiz              @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

// Action utilisateur
model user_action {
   id                    Int               @default(autoincrement()) @id
   time                  DateTime          @default(now()) @db.Timestamptz(6)
   user_id               Int
   action                String

   user                  user              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

// Relation utilisateur <-> matière (est-elle acquise)
model user_topic {
   id                    Int               @default(autoincrement()) @id
   time                  DateTime          @default(now()) @db.Timestamptz(6)
   user_id               Int               
   topic_id              Int
   done                  Boolean           @default(false) // = la matière est acquise par l'utilisateur

   user                  user              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   topic                 topic             @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   @@unique([user_id, topic_id])
}

// Annoation textuelle d'un cours par un utilisateur
model user_text_annotation {
   id                    Int               @default(autoincrement()) @id
   time                  DateTime          @default(now()) @db.Timestamptz(6)
   user_id               Int
   topic_id              Int
   text                  String
   x                     Int
   y                     Int

   user                  user               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   topic                 topic              @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

// Relation utilisateur <-> fiche de révision (est-elle acquise)
model user_card {
   id                    Int               @default(autoincrement()) @id
   time                  DateTime          @default(now()) @db.Timestamptz(6)
   user_id               Int               
   card_id               Int
   done                  Boolean           @default(false) // = la fiche de révision est acquise par l'utilisateur

   user                  user              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   card                  card              @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   @@unique([user_id, card_id])
}

// Relation utilisateur <-> QCM (est-elle acquise)
model user_quiz {
   id                    Int               @default(autoincrement()) @id
   time                  DateTime          @default(now()) @db.Timestamptz(6)
   user_id               Int               
   quiz_id               Int
   done                  Boolean           @default(false) // = le QCM est acquis par l'utilisateur

   user                  user              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   quiz                  quiz              @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   @@unique([user_id, quiz_id])
}

// Relation utilisateur <-> Cas d'étude (est-elle acquise)
model user_case_study {
   id                    Int               @default(autoincrement()) @id
   time                  DateTime          @default(now()) @db.Timestamptz(6)
   user_id               Int               
   case_study_id         Int
   done                  Boolean           @default(false) // = le cas d'étude est acquis par l'utilisateur

   user                  user              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   case_study            case_study        @relation(fields: [case_study_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
   @@unique([user_id, case_study_id])
}
